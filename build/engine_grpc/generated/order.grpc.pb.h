// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: order.proto
#ifndef GRPC_order_2eproto__INCLUDED
#define GRPC_order_2eproto__INCLUDED

#include "order.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace fastob {

class EngineInternal final {
 public:
  static constexpr char const* service_full_name() {
    return "fastob.EngineInternal";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Limit(::grpc::ClientContext* context, const ::fastob::LimitOrder& request, ::fastob::Ack* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>> AsyncLimit(::grpc::ClientContext* context, const ::fastob::LimitOrder& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>>(AsyncLimitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>> PrepareAsyncLimit(::grpc::ClientContext* context, const ::fastob::LimitOrder& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>>(PrepareAsyncLimitRaw(context, request, cq));
    }
    virtual ::grpc::Status Market(::grpc::ClientContext* context, const ::fastob::MarketOrder& request, ::fastob::Ack* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>> AsyncMarket(::grpc::ClientContext* context, const ::fastob::MarketOrder& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>>(AsyncMarketRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>> PrepareAsyncMarket(::grpc::ClientContext* context, const ::fastob::MarketOrder& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>>(PrepareAsyncMarketRaw(context, request, cq));
    }
    virtual ::grpc::Status Cancel(::grpc::ClientContext* context, const ::fastob::CancelOrder& request, ::fastob::Ack* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>> AsyncCancel(::grpc::ClientContext* context, const ::fastob::CancelOrder& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>>(AsyncCancelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>> PrepareAsyncCancel(::grpc::ClientContext* context, const ::fastob::CancelOrder& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>>(PrepareAsyncCancelRaw(context, request, cq));
    }
    virtual ::grpc::Status Top(::grpc::ClientContext* context, const ::fastob::TopRequest& request, ::fastob::TopReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::TopReply>> AsyncTop(::grpc::ClientContext* context, const ::fastob::TopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::TopReply>>(AsyncTopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::TopReply>> PrepareAsyncTop(::grpc::ClientContext* context, const ::fastob::TopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::TopReply>>(PrepareAsyncTopRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Limit(::grpc::ClientContext* context, const ::fastob::LimitOrder* request, ::fastob::Ack* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Limit(::grpc::ClientContext* context, const ::fastob::LimitOrder* request, ::fastob::Ack* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Market(::grpc::ClientContext* context, const ::fastob::MarketOrder* request, ::fastob::Ack* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Market(::grpc::ClientContext* context, const ::fastob::MarketOrder* request, ::fastob::Ack* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Cancel(::grpc::ClientContext* context, const ::fastob::CancelOrder* request, ::fastob::Ack* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Cancel(::grpc::ClientContext* context, const ::fastob::CancelOrder* request, ::fastob::Ack* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Top(::grpc::ClientContext* context, const ::fastob::TopRequest* request, ::fastob::TopReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Top(::grpc::ClientContext* context, const ::fastob::TopRequest* request, ::fastob::TopReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>* AsyncLimitRaw(::grpc::ClientContext* context, const ::fastob::LimitOrder& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>* PrepareAsyncLimitRaw(::grpc::ClientContext* context, const ::fastob::LimitOrder& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>* AsyncMarketRaw(::grpc::ClientContext* context, const ::fastob::MarketOrder& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>* PrepareAsyncMarketRaw(::grpc::ClientContext* context, const ::fastob::MarketOrder& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>* AsyncCancelRaw(::grpc::ClientContext* context, const ::fastob::CancelOrder& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>* PrepareAsyncCancelRaw(::grpc::ClientContext* context, const ::fastob::CancelOrder& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fastob::TopReply>* AsyncTopRaw(::grpc::ClientContext* context, const ::fastob::TopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fastob::TopReply>* PrepareAsyncTopRaw(::grpc::ClientContext* context, const ::fastob::TopRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Limit(::grpc::ClientContext* context, const ::fastob::LimitOrder& request, ::fastob::Ack* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::Ack>> AsyncLimit(::grpc::ClientContext* context, const ::fastob::LimitOrder& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::Ack>>(AsyncLimitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::Ack>> PrepareAsyncLimit(::grpc::ClientContext* context, const ::fastob::LimitOrder& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::Ack>>(PrepareAsyncLimitRaw(context, request, cq));
    }
    ::grpc::Status Market(::grpc::ClientContext* context, const ::fastob::MarketOrder& request, ::fastob::Ack* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::Ack>> AsyncMarket(::grpc::ClientContext* context, const ::fastob::MarketOrder& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::Ack>>(AsyncMarketRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::Ack>> PrepareAsyncMarket(::grpc::ClientContext* context, const ::fastob::MarketOrder& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::Ack>>(PrepareAsyncMarketRaw(context, request, cq));
    }
    ::grpc::Status Cancel(::grpc::ClientContext* context, const ::fastob::CancelOrder& request, ::fastob::Ack* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::Ack>> AsyncCancel(::grpc::ClientContext* context, const ::fastob::CancelOrder& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::Ack>>(AsyncCancelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::Ack>> PrepareAsyncCancel(::grpc::ClientContext* context, const ::fastob::CancelOrder& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::Ack>>(PrepareAsyncCancelRaw(context, request, cq));
    }
    ::grpc::Status Top(::grpc::ClientContext* context, const ::fastob::TopRequest& request, ::fastob::TopReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::TopReply>> AsyncTop(::grpc::ClientContext* context, const ::fastob::TopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::TopReply>>(AsyncTopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::TopReply>> PrepareAsyncTop(::grpc::ClientContext* context, const ::fastob::TopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::TopReply>>(PrepareAsyncTopRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Limit(::grpc::ClientContext* context, const ::fastob::LimitOrder* request, ::fastob::Ack* response, std::function<void(::grpc::Status)>) override;
      void Limit(::grpc::ClientContext* context, const ::fastob::LimitOrder* request, ::fastob::Ack* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Market(::grpc::ClientContext* context, const ::fastob::MarketOrder* request, ::fastob::Ack* response, std::function<void(::grpc::Status)>) override;
      void Market(::grpc::ClientContext* context, const ::fastob::MarketOrder* request, ::fastob::Ack* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Cancel(::grpc::ClientContext* context, const ::fastob::CancelOrder* request, ::fastob::Ack* response, std::function<void(::grpc::Status)>) override;
      void Cancel(::grpc::ClientContext* context, const ::fastob::CancelOrder* request, ::fastob::Ack* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Top(::grpc::ClientContext* context, const ::fastob::TopRequest* request, ::fastob::TopReply* response, std::function<void(::grpc::Status)>) override;
      void Top(::grpc::ClientContext* context, const ::fastob::TopRequest* request, ::fastob::TopReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::fastob::Ack>* AsyncLimitRaw(::grpc::ClientContext* context, const ::fastob::LimitOrder& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fastob::Ack>* PrepareAsyncLimitRaw(::grpc::ClientContext* context, const ::fastob::LimitOrder& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fastob::Ack>* AsyncMarketRaw(::grpc::ClientContext* context, const ::fastob::MarketOrder& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fastob::Ack>* PrepareAsyncMarketRaw(::grpc::ClientContext* context, const ::fastob::MarketOrder& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fastob::Ack>* AsyncCancelRaw(::grpc::ClientContext* context, const ::fastob::CancelOrder& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fastob::Ack>* PrepareAsyncCancelRaw(::grpc::ClientContext* context, const ::fastob::CancelOrder& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fastob::TopReply>* AsyncTopRaw(::grpc::ClientContext* context, const ::fastob::TopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fastob::TopReply>* PrepareAsyncTopRaw(::grpc::ClientContext* context, const ::fastob::TopRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Limit_;
    const ::grpc::internal::RpcMethod rpcmethod_Market_;
    const ::grpc::internal::RpcMethod rpcmethod_Cancel_;
    const ::grpc::internal::RpcMethod rpcmethod_Top_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Limit(::grpc::ServerContext* context, const ::fastob::LimitOrder* request, ::fastob::Ack* response);
    virtual ::grpc::Status Market(::grpc::ServerContext* context, const ::fastob::MarketOrder* request, ::fastob::Ack* response);
    virtual ::grpc::Status Cancel(::grpc::ServerContext* context, const ::fastob::CancelOrder* request, ::fastob::Ack* response);
    virtual ::grpc::Status Top(::grpc::ServerContext* context, const ::fastob::TopRequest* request, ::fastob::TopReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Limit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Limit() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Limit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Limit(::grpc::ServerContext* /*context*/, const ::fastob::LimitOrder* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLimit(::grpc::ServerContext* context, ::fastob::LimitOrder* request, ::grpc::ServerAsyncResponseWriter< ::fastob::Ack>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Market : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Market() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Market() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Market(::grpc::ServerContext* /*context*/, const ::fastob::MarketOrder* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMarket(::grpc::ServerContext* context, ::fastob::MarketOrder* request, ::grpc::ServerAsyncResponseWriter< ::fastob::Ack>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Cancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Cancel() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Cancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Cancel(::grpc::ServerContext* /*context*/, const ::fastob::CancelOrder* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancel(::grpc::ServerContext* context, ::fastob::CancelOrder* request, ::grpc::ServerAsyncResponseWriter< ::fastob::Ack>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Top : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Top() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Top() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Top(::grpc::ServerContext* /*context*/, const ::fastob::TopRequest* /*request*/, ::fastob::TopReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTop(::grpc::ServerContext* context, ::fastob::TopRequest* request, ::grpc::ServerAsyncResponseWriter< ::fastob::TopReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Limit<WithAsyncMethod_Market<WithAsyncMethod_Cancel<WithAsyncMethod_Top<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Limit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Limit() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::fastob::LimitOrder, ::fastob::Ack>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fastob::LimitOrder* request, ::fastob::Ack* response) { return this->Limit(context, request, response); }));}
    void SetMessageAllocatorFor_Limit(
        ::grpc::MessageAllocator< ::fastob::LimitOrder, ::fastob::Ack>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fastob::LimitOrder, ::fastob::Ack>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Limit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Limit(::grpc::ServerContext* /*context*/, const ::fastob::LimitOrder* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Limit(
      ::grpc::CallbackServerContext* /*context*/, const ::fastob::LimitOrder* /*request*/, ::fastob::Ack* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Market : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Market() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::fastob::MarketOrder, ::fastob::Ack>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fastob::MarketOrder* request, ::fastob::Ack* response) { return this->Market(context, request, response); }));}
    void SetMessageAllocatorFor_Market(
        ::grpc::MessageAllocator< ::fastob::MarketOrder, ::fastob::Ack>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fastob::MarketOrder, ::fastob::Ack>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Market() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Market(::grpc::ServerContext* /*context*/, const ::fastob::MarketOrder* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Market(
      ::grpc::CallbackServerContext* /*context*/, const ::fastob::MarketOrder* /*request*/, ::fastob::Ack* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Cancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Cancel() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::fastob::CancelOrder, ::fastob::Ack>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fastob::CancelOrder* request, ::fastob::Ack* response) { return this->Cancel(context, request, response); }));}
    void SetMessageAllocatorFor_Cancel(
        ::grpc::MessageAllocator< ::fastob::CancelOrder, ::fastob::Ack>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fastob::CancelOrder, ::fastob::Ack>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Cancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Cancel(::grpc::ServerContext* /*context*/, const ::fastob::CancelOrder* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Cancel(
      ::grpc::CallbackServerContext* /*context*/, const ::fastob::CancelOrder* /*request*/, ::fastob::Ack* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Top : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Top() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::fastob::TopRequest, ::fastob::TopReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fastob::TopRequest* request, ::fastob::TopReply* response) { return this->Top(context, request, response); }));}
    void SetMessageAllocatorFor_Top(
        ::grpc::MessageAllocator< ::fastob::TopRequest, ::fastob::TopReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fastob::TopRequest, ::fastob::TopReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Top() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Top(::grpc::ServerContext* /*context*/, const ::fastob::TopRequest* /*request*/, ::fastob::TopReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Top(
      ::grpc::CallbackServerContext* /*context*/, const ::fastob::TopRequest* /*request*/, ::fastob::TopReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Limit<WithCallbackMethod_Market<WithCallbackMethod_Cancel<WithCallbackMethod_Top<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Limit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Limit() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Limit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Limit(::grpc::ServerContext* /*context*/, const ::fastob::LimitOrder* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Market : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Market() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Market() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Market(::grpc::ServerContext* /*context*/, const ::fastob::MarketOrder* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Cancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Cancel() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Cancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Cancel(::grpc::ServerContext* /*context*/, const ::fastob::CancelOrder* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Top : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Top() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Top() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Top(::grpc::ServerContext* /*context*/, const ::fastob::TopRequest* /*request*/, ::fastob::TopReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Limit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Limit() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Limit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Limit(::grpc::ServerContext* /*context*/, const ::fastob::LimitOrder* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLimit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Market : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Market() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Market() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Market(::grpc::ServerContext* /*context*/, const ::fastob::MarketOrder* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMarket(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Cancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Cancel() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Cancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Cancel(::grpc::ServerContext* /*context*/, const ::fastob::CancelOrder* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Top : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Top() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Top() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Top(::grpc::ServerContext* /*context*/, const ::fastob::TopRequest* /*request*/, ::fastob::TopReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Limit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Limit() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Limit(context, request, response); }));
    }
    ~WithRawCallbackMethod_Limit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Limit(::grpc::ServerContext* /*context*/, const ::fastob::LimitOrder* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Limit(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Market : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Market() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Market(context, request, response); }));
    }
    ~WithRawCallbackMethod_Market() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Market(::grpc::ServerContext* /*context*/, const ::fastob::MarketOrder* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Market(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Cancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Cancel() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Cancel(context, request, response); }));
    }
    ~WithRawCallbackMethod_Cancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Cancel(::grpc::ServerContext* /*context*/, const ::fastob::CancelOrder* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Cancel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Top : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Top() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Top(context, request, response); }));
    }
    ~WithRawCallbackMethod_Top() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Top(::grpc::ServerContext* /*context*/, const ::fastob::TopRequest* /*request*/, ::fastob::TopReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Top(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Limit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Limit() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fastob::LimitOrder, ::fastob::Ack>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fastob::LimitOrder, ::fastob::Ack>* streamer) {
                       return this->StreamedLimit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Limit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Limit(::grpc::ServerContext* /*context*/, const ::fastob::LimitOrder* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLimit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fastob::LimitOrder,::fastob::Ack>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Market : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Market() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fastob::MarketOrder, ::fastob::Ack>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fastob::MarketOrder, ::fastob::Ack>* streamer) {
                       return this->StreamedMarket(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Market() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Market(::grpc::ServerContext* /*context*/, const ::fastob::MarketOrder* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMarket(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fastob::MarketOrder,::fastob::Ack>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Cancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Cancel() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fastob::CancelOrder, ::fastob::Ack>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fastob::CancelOrder, ::fastob::Ack>* streamer) {
                       return this->StreamedCancel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Cancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Cancel(::grpc::ServerContext* /*context*/, const ::fastob::CancelOrder* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCancel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fastob::CancelOrder,::fastob::Ack>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Top : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Top() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fastob::TopRequest, ::fastob::TopReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fastob::TopRequest, ::fastob::TopReply>* streamer) {
                       return this->StreamedTop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Top() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Top(::grpc::ServerContext* /*context*/, const ::fastob::TopRequest* /*request*/, ::fastob::TopReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fastob::TopRequest,::fastob::TopReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Limit<WithStreamedUnaryMethod_Market<WithStreamedUnaryMethod_Cancel<WithStreamedUnaryMethod_Top<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Limit<WithStreamedUnaryMethod_Market<WithStreamedUnaryMethod_Cancel<WithStreamedUnaryMethod_Top<Service > > > > StreamedService;
};
// exposed by C++ engine

class GatewayPublic final {
 public:
  static constexpr char const* service_full_name() {
    return "fastob.GatewayPublic";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SubmitLimit(::grpc::ClientContext* context, const ::fastob::SubmitLimitRequest& request, ::fastob::Ack* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>> AsyncSubmitLimit(::grpc::ClientContext* context, const ::fastob::SubmitLimitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>>(AsyncSubmitLimitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>> PrepareAsyncSubmitLimit(::grpc::ClientContext* context, const ::fastob::SubmitLimitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>>(PrepareAsyncSubmitLimitRaw(context, request, cq));
    }
    virtual ::grpc::Status SubmitMarket(::grpc::ClientContext* context, const ::fastob::SubmitMarketRequest& request, ::fastob::Ack* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>> AsyncSubmitMarket(::grpc::ClientContext* context, const ::fastob::SubmitMarketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>>(AsyncSubmitMarketRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>> PrepareAsyncSubmitMarket(::grpc::ClientContext* context, const ::fastob::SubmitMarketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>>(PrepareAsyncSubmitMarketRaw(context, request, cq));
    }
    virtual ::grpc::Status SubmitCancel(::grpc::ClientContext* context, const ::fastob::SubmitCancelRequest& request, ::fastob::Ack* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>> AsyncSubmitCancel(::grpc::ClientContext* context, const ::fastob::SubmitCancelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>>(AsyncSubmitCancelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>> PrepareAsyncSubmitCancel(::grpc::ClientContext* context, const ::fastob::SubmitCancelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>>(PrepareAsyncSubmitCancelRaw(context, request, cq));
    }
    virtual ::grpc::Status Top(::grpc::ClientContext* context, const ::fastob::TopRequest& request, ::fastob::TopReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::TopReply>> AsyncTop(::grpc::ClientContext* context, const ::fastob::TopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::TopReply>>(AsyncTopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::TopReply>> PrepareAsyncTop(::grpc::ClientContext* context, const ::fastob::TopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::TopReply>>(PrepareAsyncTopRaw(context, request, cq));
    }
    virtual ::grpc::Status Stats(::grpc::ClientContext* context, const ::fastob::StatsRequest& request, ::fastob::StatsReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::StatsReply>> AsyncStats(::grpc::ClientContext* context, const ::fastob::StatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::StatsReply>>(AsyncStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::StatsReply>> PrepareAsyncStats(::grpc::ClientContext* context, const ::fastob::StatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastob::StatsReply>>(PrepareAsyncStatsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SubmitLimit(::grpc::ClientContext* context, const ::fastob::SubmitLimitRequest* request, ::fastob::Ack* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SubmitLimit(::grpc::ClientContext* context, const ::fastob::SubmitLimitRequest* request, ::fastob::Ack* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SubmitMarket(::grpc::ClientContext* context, const ::fastob::SubmitMarketRequest* request, ::fastob::Ack* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SubmitMarket(::grpc::ClientContext* context, const ::fastob::SubmitMarketRequest* request, ::fastob::Ack* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SubmitCancel(::grpc::ClientContext* context, const ::fastob::SubmitCancelRequest* request, ::fastob::Ack* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SubmitCancel(::grpc::ClientContext* context, const ::fastob::SubmitCancelRequest* request, ::fastob::Ack* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Top(::grpc::ClientContext* context, const ::fastob::TopRequest* request, ::fastob::TopReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Top(::grpc::ClientContext* context, const ::fastob::TopRequest* request, ::fastob::TopReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Stats(::grpc::ClientContext* context, const ::fastob::StatsRequest* request, ::fastob::StatsReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Stats(::grpc::ClientContext* context, const ::fastob::StatsRequest* request, ::fastob::StatsReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>* AsyncSubmitLimitRaw(::grpc::ClientContext* context, const ::fastob::SubmitLimitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>* PrepareAsyncSubmitLimitRaw(::grpc::ClientContext* context, const ::fastob::SubmitLimitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>* AsyncSubmitMarketRaw(::grpc::ClientContext* context, const ::fastob::SubmitMarketRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>* PrepareAsyncSubmitMarketRaw(::grpc::ClientContext* context, const ::fastob::SubmitMarketRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>* AsyncSubmitCancelRaw(::grpc::ClientContext* context, const ::fastob::SubmitCancelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fastob::Ack>* PrepareAsyncSubmitCancelRaw(::grpc::ClientContext* context, const ::fastob::SubmitCancelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fastob::TopReply>* AsyncTopRaw(::grpc::ClientContext* context, const ::fastob::TopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fastob::TopReply>* PrepareAsyncTopRaw(::grpc::ClientContext* context, const ::fastob::TopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fastob::StatsReply>* AsyncStatsRaw(::grpc::ClientContext* context, const ::fastob::StatsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fastob::StatsReply>* PrepareAsyncStatsRaw(::grpc::ClientContext* context, const ::fastob::StatsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SubmitLimit(::grpc::ClientContext* context, const ::fastob::SubmitLimitRequest& request, ::fastob::Ack* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::Ack>> AsyncSubmitLimit(::grpc::ClientContext* context, const ::fastob::SubmitLimitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::Ack>>(AsyncSubmitLimitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::Ack>> PrepareAsyncSubmitLimit(::grpc::ClientContext* context, const ::fastob::SubmitLimitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::Ack>>(PrepareAsyncSubmitLimitRaw(context, request, cq));
    }
    ::grpc::Status SubmitMarket(::grpc::ClientContext* context, const ::fastob::SubmitMarketRequest& request, ::fastob::Ack* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::Ack>> AsyncSubmitMarket(::grpc::ClientContext* context, const ::fastob::SubmitMarketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::Ack>>(AsyncSubmitMarketRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::Ack>> PrepareAsyncSubmitMarket(::grpc::ClientContext* context, const ::fastob::SubmitMarketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::Ack>>(PrepareAsyncSubmitMarketRaw(context, request, cq));
    }
    ::grpc::Status SubmitCancel(::grpc::ClientContext* context, const ::fastob::SubmitCancelRequest& request, ::fastob::Ack* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::Ack>> AsyncSubmitCancel(::grpc::ClientContext* context, const ::fastob::SubmitCancelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::Ack>>(AsyncSubmitCancelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::Ack>> PrepareAsyncSubmitCancel(::grpc::ClientContext* context, const ::fastob::SubmitCancelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::Ack>>(PrepareAsyncSubmitCancelRaw(context, request, cq));
    }
    ::grpc::Status Top(::grpc::ClientContext* context, const ::fastob::TopRequest& request, ::fastob::TopReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::TopReply>> AsyncTop(::grpc::ClientContext* context, const ::fastob::TopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::TopReply>>(AsyncTopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::TopReply>> PrepareAsyncTop(::grpc::ClientContext* context, const ::fastob::TopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::TopReply>>(PrepareAsyncTopRaw(context, request, cq));
    }
    ::grpc::Status Stats(::grpc::ClientContext* context, const ::fastob::StatsRequest& request, ::fastob::StatsReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::StatsReply>> AsyncStats(::grpc::ClientContext* context, const ::fastob::StatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::StatsReply>>(AsyncStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::StatsReply>> PrepareAsyncStats(::grpc::ClientContext* context, const ::fastob::StatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastob::StatsReply>>(PrepareAsyncStatsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SubmitLimit(::grpc::ClientContext* context, const ::fastob::SubmitLimitRequest* request, ::fastob::Ack* response, std::function<void(::grpc::Status)>) override;
      void SubmitLimit(::grpc::ClientContext* context, const ::fastob::SubmitLimitRequest* request, ::fastob::Ack* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SubmitMarket(::grpc::ClientContext* context, const ::fastob::SubmitMarketRequest* request, ::fastob::Ack* response, std::function<void(::grpc::Status)>) override;
      void SubmitMarket(::grpc::ClientContext* context, const ::fastob::SubmitMarketRequest* request, ::fastob::Ack* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SubmitCancel(::grpc::ClientContext* context, const ::fastob::SubmitCancelRequest* request, ::fastob::Ack* response, std::function<void(::grpc::Status)>) override;
      void SubmitCancel(::grpc::ClientContext* context, const ::fastob::SubmitCancelRequest* request, ::fastob::Ack* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Top(::grpc::ClientContext* context, const ::fastob::TopRequest* request, ::fastob::TopReply* response, std::function<void(::grpc::Status)>) override;
      void Top(::grpc::ClientContext* context, const ::fastob::TopRequest* request, ::fastob::TopReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Stats(::grpc::ClientContext* context, const ::fastob::StatsRequest* request, ::fastob::StatsReply* response, std::function<void(::grpc::Status)>) override;
      void Stats(::grpc::ClientContext* context, const ::fastob::StatsRequest* request, ::fastob::StatsReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::fastob::Ack>* AsyncSubmitLimitRaw(::grpc::ClientContext* context, const ::fastob::SubmitLimitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fastob::Ack>* PrepareAsyncSubmitLimitRaw(::grpc::ClientContext* context, const ::fastob::SubmitLimitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fastob::Ack>* AsyncSubmitMarketRaw(::grpc::ClientContext* context, const ::fastob::SubmitMarketRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fastob::Ack>* PrepareAsyncSubmitMarketRaw(::grpc::ClientContext* context, const ::fastob::SubmitMarketRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fastob::Ack>* AsyncSubmitCancelRaw(::grpc::ClientContext* context, const ::fastob::SubmitCancelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fastob::Ack>* PrepareAsyncSubmitCancelRaw(::grpc::ClientContext* context, const ::fastob::SubmitCancelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fastob::TopReply>* AsyncTopRaw(::grpc::ClientContext* context, const ::fastob::TopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fastob::TopReply>* PrepareAsyncTopRaw(::grpc::ClientContext* context, const ::fastob::TopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fastob::StatsReply>* AsyncStatsRaw(::grpc::ClientContext* context, const ::fastob::StatsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fastob::StatsReply>* PrepareAsyncStatsRaw(::grpc::ClientContext* context, const ::fastob::StatsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitLimit_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitMarket_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitCancel_;
    const ::grpc::internal::RpcMethod rpcmethod_Top_;
    const ::grpc::internal::RpcMethod rpcmethod_Stats_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SubmitLimit(::grpc::ServerContext* context, const ::fastob::SubmitLimitRequest* request, ::fastob::Ack* response);
    virtual ::grpc::Status SubmitMarket(::grpc::ServerContext* context, const ::fastob::SubmitMarketRequest* request, ::fastob::Ack* response);
    virtual ::grpc::Status SubmitCancel(::grpc::ServerContext* context, const ::fastob::SubmitCancelRequest* request, ::fastob::Ack* response);
    virtual ::grpc::Status Top(::grpc::ServerContext* context, const ::fastob::TopRequest* request, ::fastob::TopReply* response);
    virtual ::grpc::Status Stats(::grpc::ServerContext* context, const ::fastob::StatsRequest* request, ::fastob::StatsReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitLimit() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SubmitLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitLimit(::grpc::ServerContext* /*context*/, const ::fastob::SubmitLimitRequest* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitLimit(::grpc::ServerContext* context, ::fastob::SubmitLimitRequest* request, ::grpc::ServerAsyncResponseWriter< ::fastob::Ack>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitMarket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitMarket() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SubmitMarket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitMarket(::grpc::ServerContext* /*context*/, const ::fastob::SubmitMarketRequest* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitMarket(::grpc::ServerContext* context, ::fastob::SubmitMarketRequest* request, ::grpc::ServerAsyncResponseWriter< ::fastob::Ack>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitCancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitCancel() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SubmitCancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitCancel(::grpc::ServerContext* /*context*/, const ::fastob::SubmitCancelRequest* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitCancel(::grpc::ServerContext* context, ::fastob::SubmitCancelRequest* request, ::grpc::ServerAsyncResponseWriter< ::fastob::Ack>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Top : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Top() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Top() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Top(::grpc::ServerContext* /*context*/, const ::fastob::TopRequest* /*request*/, ::fastob::TopReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTop(::grpc::ServerContext* context, ::fastob::TopRequest* request, ::grpc::ServerAsyncResponseWriter< ::fastob::TopReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Stats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Stats() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Stats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stats(::grpc::ServerContext* /*context*/, const ::fastob::StatsRequest* /*request*/, ::fastob::StatsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStats(::grpc::ServerContext* context, ::fastob::StatsRequest* request, ::grpc::ServerAsyncResponseWriter< ::fastob::StatsReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SubmitLimit<WithAsyncMethod_SubmitMarket<WithAsyncMethod_SubmitCancel<WithAsyncMethod_Top<WithAsyncMethod_Stats<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SubmitLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubmitLimit() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::fastob::SubmitLimitRequest, ::fastob::Ack>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fastob::SubmitLimitRequest* request, ::fastob::Ack* response) { return this->SubmitLimit(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitLimit(
        ::grpc::MessageAllocator< ::fastob::SubmitLimitRequest, ::fastob::Ack>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fastob::SubmitLimitRequest, ::fastob::Ack>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SubmitLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitLimit(::grpc::ServerContext* /*context*/, const ::fastob::SubmitLimitRequest* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubmitLimit(
      ::grpc::CallbackServerContext* /*context*/, const ::fastob::SubmitLimitRequest* /*request*/, ::fastob::Ack* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubmitMarket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubmitMarket() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::fastob::SubmitMarketRequest, ::fastob::Ack>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fastob::SubmitMarketRequest* request, ::fastob::Ack* response) { return this->SubmitMarket(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitMarket(
        ::grpc::MessageAllocator< ::fastob::SubmitMarketRequest, ::fastob::Ack>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fastob::SubmitMarketRequest, ::fastob::Ack>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SubmitMarket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitMarket(::grpc::ServerContext* /*context*/, const ::fastob::SubmitMarketRequest* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubmitMarket(
      ::grpc::CallbackServerContext* /*context*/, const ::fastob::SubmitMarketRequest* /*request*/, ::fastob::Ack* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubmitCancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubmitCancel() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::fastob::SubmitCancelRequest, ::fastob::Ack>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fastob::SubmitCancelRequest* request, ::fastob::Ack* response) { return this->SubmitCancel(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitCancel(
        ::grpc::MessageAllocator< ::fastob::SubmitCancelRequest, ::fastob::Ack>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fastob::SubmitCancelRequest, ::fastob::Ack>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SubmitCancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitCancel(::grpc::ServerContext* /*context*/, const ::fastob::SubmitCancelRequest* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubmitCancel(
      ::grpc::CallbackServerContext* /*context*/, const ::fastob::SubmitCancelRequest* /*request*/, ::fastob::Ack* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Top : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Top() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::fastob::TopRequest, ::fastob::TopReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fastob::TopRequest* request, ::fastob::TopReply* response) { return this->Top(context, request, response); }));}
    void SetMessageAllocatorFor_Top(
        ::grpc::MessageAllocator< ::fastob::TopRequest, ::fastob::TopReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fastob::TopRequest, ::fastob::TopReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Top() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Top(::grpc::ServerContext* /*context*/, const ::fastob::TopRequest* /*request*/, ::fastob::TopReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Top(
      ::grpc::CallbackServerContext* /*context*/, const ::fastob::TopRequest* /*request*/, ::fastob::TopReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Stats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Stats() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::fastob::StatsRequest, ::fastob::StatsReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::fastob::StatsRequest* request, ::fastob::StatsReply* response) { return this->Stats(context, request, response); }));}
    void SetMessageAllocatorFor_Stats(
        ::grpc::MessageAllocator< ::fastob::StatsRequest, ::fastob::StatsReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fastob::StatsRequest, ::fastob::StatsReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Stats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stats(::grpc::ServerContext* /*context*/, const ::fastob::StatsRequest* /*request*/, ::fastob::StatsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Stats(
      ::grpc::CallbackServerContext* /*context*/, const ::fastob::StatsRequest* /*request*/, ::fastob::StatsReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SubmitLimit<WithCallbackMethod_SubmitMarket<WithCallbackMethod_SubmitCancel<WithCallbackMethod_Top<WithCallbackMethod_Stats<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SubmitLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitLimit() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SubmitLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitLimit(::grpc::ServerContext* /*context*/, const ::fastob::SubmitLimitRequest* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitMarket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitMarket() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SubmitMarket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitMarket(::grpc::ServerContext* /*context*/, const ::fastob::SubmitMarketRequest* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitCancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitCancel() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SubmitCancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitCancel(::grpc::ServerContext* /*context*/, const ::fastob::SubmitCancelRequest* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Top : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Top() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Top() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Top(::grpc::ServerContext* /*context*/, const ::fastob::TopRequest* /*request*/, ::fastob::TopReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Stats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Stats() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Stats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stats(::grpc::ServerContext* /*context*/, const ::fastob::StatsRequest* /*request*/, ::fastob::StatsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitLimit() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SubmitLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitLimit(::grpc::ServerContext* /*context*/, const ::fastob::SubmitLimitRequest* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitLimit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitMarket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitMarket() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SubmitMarket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitMarket(::grpc::ServerContext* /*context*/, const ::fastob::SubmitMarketRequest* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitMarket(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitCancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitCancel() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SubmitCancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitCancel(::grpc::ServerContext* /*context*/, const ::fastob::SubmitCancelRequest* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitCancel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Top : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Top() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Top() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Top(::grpc::ServerContext* /*context*/, const ::fastob::TopRequest* /*request*/, ::fastob::TopReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Stats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Stats() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Stats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stats(::grpc::ServerContext* /*context*/, const ::fastob::StatsRequest* /*request*/, ::fastob::StatsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStats(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubmitLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubmitLimit() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitLimit(context, request, response); }));
    }
    ~WithRawCallbackMethod_SubmitLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitLimit(::grpc::ServerContext* /*context*/, const ::fastob::SubmitLimitRequest* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubmitLimit(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubmitMarket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubmitMarket() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitMarket(context, request, response); }));
    }
    ~WithRawCallbackMethod_SubmitMarket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitMarket(::grpc::ServerContext* /*context*/, const ::fastob::SubmitMarketRequest* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubmitMarket(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubmitCancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubmitCancel() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitCancel(context, request, response); }));
    }
    ~WithRawCallbackMethod_SubmitCancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitCancel(::grpc::ServerContext* /*context*/, const ::fastob::SubmitCancelRequest* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubmitCancel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Top : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Top() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Top(context, request, response); }));
    }
    ~WithRawCallbackMethod_Top() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Top(::grpc::ServerContext* /*context*/, const ::fastob::TopRequest* /*request*/, ::fastob::TopReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Top(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Stats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Stats() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Stats(context, request, response); }));
    }
    ~WithRawCallbackMethod_Stats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stats(::grpc::ServerContext* /*context*/, const ::fastob::StatsRequest* /*request*/, ::fastob::StatsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Stats(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitLimit() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fastob::SubmitLimitRequest, ::fastob::Ack>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fastob::SubmitLimitRequest, ::fastob::Ack>* streamer) {
                       return this->StreamedSubmitLimit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitLimit(::grpc::ServerContext* /*context*/, const ::fastob::SubmitLimitRequest* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitLimit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fastob::SubmitLimitRequest,::fastob::Ack>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitMarket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitMarket() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fastob::SubmitMarketRequest, ::fastob::Ack>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fastob::SubmitMarketRequest, ::fastob::Ack>* streamer) {
                       return this->StreamedSubmitMarket(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitMarket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitMarket(::grpc::ServerContext* /*context*/, const ::fastob::SubmitMarketRequest* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitMarket(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fastob::SubmitMarketRequest,::fastob::Ack>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitCancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitCancel() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fastob::SubmitCancelRequest, ::fastob::Ack>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fastob::SubmitCancelRequest, ::fastob::Ack>* streamer) {
                       return this->StreamedSubmitCancel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitCancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitCancel(::grpc::ServerContext* /*context*/, const ::fastob::SubmitCancelRequest* /*request*/, ::fastob::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitCancel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fastob::SubmitCancelRequest,::fastob::Ack>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Top : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Top() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fastob::TopRequest, ::fastob::TopReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fastob::TopRequest, ::fastob::TopReply>* streamer) {
                       return this->StreamedTop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Top() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Top(::grpc::ServerContext* /*context*/, const ::fastob::TopRequest* /*request*/, ::fastob::TopReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fastob::TopRequest,::fastob::TopReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Stats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Stats() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fastob::StatsRequest, ::fastob::StatsReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fastob::StatsRequest, ::fastob::StatsReply>* streamer) {
                       return this->StreamedStats(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Stats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Stats(::grpc::ServerContext* /*context*/, const ::fastob::StatsRequest* /*request*/, ::fastob::StatsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStats(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fastob::StatsRequest,::fastob::StatsReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SubmitLimit<WithStreamedUnaryMethod_SubmitMarket<WithStreamedUnaryMethod_SubmitCancel<WithStreamedUnaryMethod_Top<WithStreamedUnaryMethod_Stats<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SubmitLimit<WithStreamedUnaryMethod_SubmitMarket<WithStreamedUnaryMethod_SubmitCancel<WithStreamedUnaryMethod_Top<WithStreamedUnaryMethod_Stats<Service > > > > > StreamedService;
};
// exposed by Python gateway

}  // namespace fastob


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_order_2eproto__INCLUDED
