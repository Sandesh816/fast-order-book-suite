// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: order.proto

#include "order.pb.h"
#include "order.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace fastob {

static const char* EngineInternal_method_names[] = {
  "/fastob.EngineInternal/Limit",
  "/fastob.EngineInternal/Market",
  "/fastob.EngineInternal/Cancel",
  "/fastob.EngineInternal/Top",
};

std::unique_ptr< EngineInternal::Stub> EngineInternal::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EngineInternal::Stub> stub(new EngineInternal::Stub(channel, options));
  return stub;
}

EngineInternal::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Limit_(EngineInternal_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Market_(EngineInternal_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Cancel_(EngineInternal_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Top_(EngineInternal_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EngineInternal::Stub::Limit(::grpc::ClientContext* context, const ::fastob::LimitOrder& request, ::fastob::Ack* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fastob::LimitOrder, ::fastob::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Limit_, context, request, response);
}

void EngineInternal::Stub::async::Limit(::grpc::ClientContext* context, const ::fastob::LimitOrder* request, ::fastob::Ack* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fastob::LimitOrder, ::fastob::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Limit_, context, request, response, std::move(f));
}

void EngineInternal::Stub::async::Limit(::grpc::ClientContext* context, const ::fastob::LimitOrder* request, ::fastob::Ack* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Limit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fastob::Ack>* EngineInternal::Stub::PrepareAsyncLimitRaw(::grpc::ClientContext* context, const ::fastob::LimitOrder& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fastob::Ack, ::fastob::LimitOrder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Limit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fastob::Ack>* EngineInternal::Stub::AsyncLimitRaw(::grpc::ClientContext* context, const ::fastob::LimitOrder& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLimitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EngineInternal::Stub::Market(::grpc::ClientContext* context, const ::fastob::MarketOrder& request, ::fastob::Ack* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fastob::MarketOrder, ::fastob::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Market_, context, request, response);
}

void EngineInternal::Stub::async::Market(::grpc::ClientContext* context, const ::fastob::MarketOrder* request, ::fastob::Ack* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fastob::MarketOrder, ::fastob::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Market_, context, request, response, std::move(f));
}

void EngineInternal::Stub::async::Market(::grpc::ClientContext* context, const ::fastob::MarketOrder* request, ::fastob::Ack* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Market_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fastob::Ack>* EngineInternal::Stub::PrepareAsyncMarketRaw(::grpc::ClientContext* context, const ::fastob::MarketOrder& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fastob::Ack, ::fastob::MarketOrder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Market_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fastob::Ack>* EngineInternal::Stub::AsyncMarketRaw(::grpc::ClientContext* context, const ::fastob::MarketOrder& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMarketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EngineInternal::Stub::Cancel(::grpc::ClientContext* context, const ::fastob::CancelOrder& request, ::fastob::Ack* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fastob::CancelOrder, ::fastob::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Cancel_, context, request, response);
}

void EngineInternal::Stub::async::Cancel(::grpc::ClientContext* context, const ::fastob::CancelOrder* request, ::fastob::Ack* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fastob::CancelOrder, ::fastob::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Cancel_, context, request, response, std::move(f));
}

void EngineInternal::Stub::async::Cancel(::grpc::ClientContext* context, const ::fastob::CancelOrder* request, ::fastob::Ack* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Cancel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fastob::Ack>* EngineInternal::Stub::PrepareAsyncCancelRaw(::grpc::ClientContext* context, const ::fastob::CancelOrder& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fastob::Ack, ::fastob::CancelOrder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Cancel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fastob::Ack>* EngineInternal::Stub::AsyncCancelRaw(::grpc::ClientContext* context, const ::fastob::CancelOrder& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EngineInternal::Stub::Top(::grpc::ClientContext* context, const ::fastob::TopRequest& request, ::fastob::TopReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fastob::TopRequest, ::fastob::TopReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Top_, context, request, response);
}

void EngineInternal::Stub::async::Top(::grpc::ClientContext* context, const ::fastob::TopRequest* request, ::fastob::TopReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fastob::TopRequest, ::fastob::TopReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Top_, context, request, response, std::move(f));
}

void EngineInternal::Stub::async::Top(::grpc::ClientContext* context, const ::fastob::TopRequest* request, ::fastob::TopReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Top_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fastob::TopReply>* EngineInternal::Stub::PrepareAsyncTopRaw(::grpc::ClientContext* context, const ::fastob::TopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fastob::TopReply, ::fastob::TopRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Top_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fastob::TopReply>* EngineInternal::Stub::AsyncTopRaw(::grpc::ClientContext* context, const ::fastob::TopRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTopRaw(context, request, cq);
  result->StartCall();
  return result;
}

EngineInternal::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EngineInternal_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EngineInternal::Service, ::fastob::LimitOrder, ::fastob::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EngineInternal::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fastob::LimitOrder* req,
             ::fastob::Ack* resp) {
               return service->Limit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EngineInternal_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EngineInternal::Service, ::fastob::MarketOrder, ::fastob::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EngineInternal::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fastob::MarketOrder* req,
             ::fastob::Ack* resp) {
               return service->Market(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EngineInternal_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EngineInternal::Service, ::fastob::CancelOrder, ::fastob::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EngineInternal::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fastob::CancelOrder* req,
             ::fastob::Ack* resp) {
               return service->Cancel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EngineInternal_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EngineInternal::Service, ::fastob::TopRequest, ::fastob::TopReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EngineInternal::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fastob::TopRequest* req,
             ::fastob::TopReply* resp) {
               return service->Top(ctx, req, resp);
             }, this)));
}

EngineInternal::Service::~Service() {
}

::grpc::Status EngineInternal::Service::Limit(::grpc::ServerContext* context, const ::fastob::LimitOrder* request, ::fastob::Ack* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EngineInternal::Service::Market(::grpc::ServerContext* context, const ::fastob::MarketOrder* request, ::fastob::Ack* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EngineInternal::Service::Cancel(::grpc::ServerContext* context, const ::fastob::CancelOrder* request, ::fastob::Ack* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EngineInternal::Service::Top(::grpc::ServerContext* context, const ::fastob::TopRequest* request, ::fastob::TopReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* GatewayPublic_method_names[] = {
  "/fastob.GatewayPublic/SubmitLimit",
  "/fastob.GatewayPublic/SubmitMarket",
  "/fastob.GatewayPublic/SubmitCancel",
  "/fastob.GatewayPublic/Top",
  "/fastob.GatewayPublic/Stats",
};

std::unique_ptr< GatewayPublic::Stub> GatewayPublic::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GatewayPublic::Stub> stub(new GatewayPublic::Stub(channel, options));
  return stub;
}

GatewayPublic::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SubmitLimit_(GatewayPublic_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitMarket_(GatewayPublic_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitCancel_(GatewayPublic_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Top_(GatewayPublic_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Stats_(GatewayPublic_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GatewayPublic::Stub::SubmitLimit(::grpc::ClientContext* context, const ::fastob::SubmitLimitRequest& request, ::fastob::Ack* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fastob::SubmitLimitRequest, ::fastob::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitLimit_, context, request, response);
}

void GatewayPublic::Stub::async::SubmitLimit(::grpc::ClientContext* context, const ::fastob::SubmitLimitRequest* request, ::fastob::Ack* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fastob::SubmitLimitRequest, ::fastob::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitLimit_, context, request, response, std::move(f));
}

void GatewayPublic::Stub::async::SubmitLimit(::grpc::ClientContext* context, const ::fastob::SubmitLimitRequest* request, ::fastob::Ack* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitLimit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fastob::Ack>* GatewayPublic::Stub::PrepareAsyncSubmitLimitRaw(::grpc::ClientContext* context, const ::fastob::SubmitLimitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fastob::Ack, ::fastob::SubmitLimitRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubmitLimit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fastob::Ack>* GatewayPublic::Stub::AsyncSubmitLimitRaw(::grpc::ClientContext* context, const ::fastob::SubmitLimitRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitLimitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GatewayPublic::Stub::SubmitMarket(::grpc::ClientContext* context, const ::fastob::SubmitMarketRequest& request, ::fastob::Ack* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fastob::SubmitMarketRequest, ::fastob::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitMarket_, context, request, response);
}

void GatewayPublic::Stub::async::SubmitMarket(::grpc::ClientContext* context, const ::fastob::SubmitMarketRequest* request, ::fastob::Ack* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fastob::SubmitMarketRequest, ::fastob::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitMarket_, context, request, response, std::move(f));
}

void GatewayPublic::Stub::async::SubmitMarket(::grpc::ClientContext* context, const ::fastob::SubmitMarketRequest* request, ::fastob::Ack* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitMarket_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fastob::Ack>* GatewayPublic::Stub::PrepareAsyncSubmitMarketRaw(::grpc::ClientContext* context, const ::fastob::SubmitMarketRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fastob::Ack, ::fastob::SubmitMarketRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubmitMarket_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fastob::Ack>* GatewayPublic::Stub::AsyncSubmitMarketRaw(::grpc::ClientContext* context, const ::fastob::SubmitMarketRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitMarketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GatewayPublic::Stub::SubmitCancel(::grpc::ClientContext* context, const ::fastob::SubmitCancelRequest& request, ::fastob::Ack* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fastob::SubmitCancelRequest, ::fastob::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitCancel_, context, request, response);
}

void GatewayPublic::Stub::async::SubmitCancel(::grpc::ClientContext* context, const ::fastob::SubmitCancelRequest* request, ::fastob::Ack* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fastob::SubmitCancelRequest, ::fastob::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitCancel_, context, request, response, std::move(f));
}

void GatewayPublic::Stub::async::SubmitCancel(::grpc::ClientContext* context, const ::fastob::SubmitCancelRequest* request, ::fastob::Ack* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitCancel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fastob::Ack>* GatewayPublic::Stub::PrepareAsyncSubmitCancelRaw(::grpc::ClientContext* context, const ::fastob::SubmitCancelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fastob::Ack, ::fastob::SubmitCancelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubmitCancel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fastob::Ack>* GatewayPublic::Stub::AsyncSubmitCancelRaw(::grpc::ClientContext* context, const ::fastob::SubmitCancelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitCancelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GatewayPublic::Stub::Top(::grpc::ClientContext* context, const ::fastob::TopRequest& request, ::fastob::TopReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fastob::TopRequest, ::fastob::TopReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Top_, context, request, response);
}

void GatewayPublic::Stub::async::Top(::grpc::ClientContext* context, const ::fastob::TopRequest* request, ::fastob::TopReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fastob::TopRequest, ::fastob::TopReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Top_, context, request, response, std::move(f));
}

void GatewayPublic::Stub::async::Top(::grpc::ClientContext* context, const ::fastob::TopRequest* request, ::fastob::TopReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Top_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fastob::TopReply>* GatewayPublic::Stub::PrepareAsyncTopRaw(::grpc::ClientContext* context, const ::fastob::TopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fastob::TopReply, ::fastob::TopRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Top_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fastob::TopReply>* GatewayPublic::Stub::AsyncTopRaw(::grpc::ClientContext* context, const ::fastob::TopRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GatewayPublic::Stub::Stats(::grpc::ClientContext* context, const ::fastob::StatsRequest& request, ::fastob::StatsReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fastob::StatsRequest, ::fastob::StatsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Stats_, context, request, response);
}

void GatewayPublic::Stub::async::Stats(::grpc::ClientContext* context, const ::fastob::StatsRequest* request, ::fastob::StatsReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fastob::StatsRequest, ::fastob::StatsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Stats_, context, request, response, std::move(f));
}

void GatewayPublic::Stub::async::Stats(::grpc::ClientContext* context, const ::fastob::StatsRequest* request, ::fastob::StatsReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Stats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fastob::StatsReply>* GatewayPublic::Stub::PrepareAsyncStatsRaw(::grpc::ClientContext* context, const ::fastob::StatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fastob::StatsReply, ::fastob::StatsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Stats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fastob::StatsReply>* GatewayPublic::Stub::AsyncStatsRaw(::grpc::ClientContext* context, const ::fastob::StatsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

GatewayPublic::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GatewayPublic_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GatewayPublic::Service, ::fastob::SubmitLimitRequest, ::fastob::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GatewayPublic::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fastob::SubmitLimitRequest* req,
             ::fastob::Ack* resp) {
               return service->SubmitLimit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GatewayPublic_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GatewayPublic::Service, ::fastob::SubmitMarketRequest, ::fastob::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GatewayPublic::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fastob::SubmitMarketRequest* req,
             ::fastob::Ack* resp) {
               return service->SubmitMarket(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GatewayPublic_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GatewayPublic::Service, ::fastob::SubmitCancelRequest, ::fastob::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GatewayPublic::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fastob::SubmitCancelRequest* req,
             ::fastob::Ack* resp) {
               return service->SubmitCancel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GatewayPublic_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GatewayPublic::Service, ::fastob::TopRequest, ::fastob::TopReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GatewayPublic::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fastob::TopRequest* req,
             ::fastob::TopReply* resp) {
               return service->Top(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GatewayPublic_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GatewayPublic::Service, ::fastob::StatsRequest, ::fastob::StatsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GatewayPublic::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fastob::StatsRequest* req,
             ::fastob::StatsReply* resp) {
               return service->Stats(ctx, req, resp);
             }, this)));
}

GatewayPublic::Service::~Service() {
}

::grpc::Status GatewayPublic::Service::SubmitLimit(::grpc::ServerContext* context, const ::fastob::SubmitLimitRequest* request, ::fastob::Ack* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GatewayPublic::Service::SubmitMarket(::grpc::ServerContext* context, const ::fastob::SubmitMarketRequest* request, ::fastob::Ack* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GatewayPublic::Service::SubmitCancel(::grpc::ServerContext* context, const ::fastob::SubmitCancelRequest* request, ::fastob::Ack* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GatewayPublic::Service::Top(::grpc::ServerContext* context, const ::fastob::TopRequest* request, ::fastob::TopReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GatewayPublic::Service::Stats(::grpc::ServerContext* context, const ::fastob::StatsRequest* request, ::fastob::StatsReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace fastob
#include <grpcpp/ports_undef.inc>

