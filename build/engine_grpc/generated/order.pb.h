// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: order.proto
// Protobuf C++ Version: 5.29.3

#ifndef order_2eproto_2epb_2eh
#define order_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_order_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_order_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_order_2eproto;
namespace fastob {
class Ack;
struct AckDefaultTypeInternal;
extern AckDefaultTypeInternal _Ack_default_instance_;
class CancelOrder;
struct CancelOrderDefaultTypeInternal;
extern CancelOrderDefaultTypeInternal _CancelOrder_default_instance_;
class LimitOrder;
struct LimitOrderDefaultTypeInternal;
extern LimitOrderDefaultTypeInternal _LimitOrder_default_instance_;
class MarketOrder;
struct MarketOrderDefaultTypeInternal;
extern MarketOrderDefaultTypeInternal _MarketOrder_default_instance_;
class OrderMeta;
struct OrderMetaDefaultTypeInternal;
extern OrderMetaDefaultTypeInternal _OrderMeta_default_instance_;
class StatsReply;
struct StatsReplyDefaultTypeInternal;
extern StatsReplyDefaultTypeInternal _StatsReply_default_instance_;
class StatsRequest;
struct StatsRequestDefaultTypeInternal;
extern StatsRequestDefaultTypeInternal _StatsRequest_default_instance_;
class SubmitCancelRequest;
struct SubmitCancelRequestDefaultTypeInternal;
extern SubmitCancelRequestDefaultTypeInternal _SubmitCancelRequest_default_instance_;
class SubmitLimitRequest;
struct SubmitLimitRequestDefaultTypeInternal;
extern SubmitLimitRequestDefaultTypeInternal _SubmitLimitRequest_default_instance_;
class SubmitMarketRequest;
struct SubmitMarketRequestDefaultTypeInternal;
extern SubmitMarketRequestDefaultTypeInternal _SubmitMarketRequest_default_instance_;
class TopReply;
struct TopReplyDefaultTypeInternal;
extern TopReplyDefaultTypeInternal _TopReply_default_instance_;
class TopRequest;
struct TopRequestDefaultTypeInternal;
extern TopRequestDefaultTypeInternal _TopRequest_default_instance_;
}  // namespace fastob
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace fastob {

// ===================================================================


// -------------------------------------------------------------------

class TopRequest final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:fastob.TopRequest) */ {
 public:
  inline TopRequest() : TopRequest(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TopRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TopRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TopRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline TopRequest(const TopRequest& from) : TopRequest(nullptr, from) {}
  inline TopRequest(TopRequest&& from) noexcept
      : TopRequest(nullptr, std::move(from)) {}
  inline TopRequest& operator=(const TopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopRequest& operator=(TopRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopRequest* internal_default_instance() {
    return reinterpret_cast<const TopRequest*>(
        &_TopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(TopRequest& a, TopRequest& b) { a.Swap(&b); }
  inline void Swap(TopRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<TopRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TopRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TopRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fastob.TopRequest"; }

 protected:
  explicit TopRequest(::google::protobuf::Arena* arena);
  TopRequest(::google::protobuf::Arena* arena, const TopRequest& from);
  TopRequest(::google::protobuf::Arena* arena, TopRequest&& from) noexcept
      : TopRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:fastob.TopRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TopRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class TopReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fastob.TopReply) */ {
 public:
  inline TopReply() : TopReply(nullptr) {}
  ~TopReply() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TopReply* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TopReply));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TopReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline TopReply(const TopReply& from) : TopReply(nullptr, from) {}
  inline TopReply(TopReply&& from) noexcept
      : TopReply(nullptr, std::move(from)) {}
  inline TopReply& operator=(const TopReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopReply& operator=(TopReply&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopReply* internal_default_instance() {
    return reinterpret_cast<const TopReply*>(
        &_TopReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(TopReply& a, TopReply& b) { a.Swap(&b); }
  inline void Swap(TopReply* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopReply* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TopReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TopReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TopReply& from) { TopReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TopReply* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fastob.TopReply"; }

 protected:
  explicit TopReply(::google::protobuf::Arena* arena);
  TopReply(::google::protobuf::Arena* arena, const TopReply& from);
  TopReply(::google::protobuf::Arena* arena, TopReply&& from) noexcept
      : TopReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBestBidFieldNumber = 1,
    kBestAskFieldNumber = 2,
  };
  // int32 best_bid = 1;
  void clear_best_bid() ;
  ::int32_t best_bid() const;
  void set_best_bid(::int32_t value);

  private:
  ::int32_t _internal_best_bid() const;
  void _internal_set_best_bid(::int32_t value);

  public:
  // int32 best_ask = 2;
  void clear_best_ask() ;
  ::int32_t best_ask() const;
  void set_best_ask(::int32_t value);

  private:
  ::int32_t _internal_best_ask() const;
  void _internal_set_best_ask(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fastob.TopReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TopReply& from_msg);
    ::int32_t best_bid_;
    ::int32_t best_ask_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class SubmitMarketRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fastob.SubmitMarketRequest) */ {
 public:
  inline SubmitMarketRequest() : SubmitMarketRequest(nullptr) {}
  ~SubmitMarketRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubmitMarketRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubmitMarketRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubmitMarketRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubmitMarketRequest(const SubmitMarketRequest& from) : SubmitMarketRequest(nullptr, from) {}
  inline SubmitMarketRequest(SubmitMarketRequest&& from) noexcept
      : SubmitMarketRequest(nullptr, std::move(from)) {}
  inline SubmitMarketRequest& operator=(const SubmitMarketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitMarketRequest& operator=(SubmitMarketRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubmitMarketRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubmitMarketRequest* internal_default_instance() {
    return reinterpret_cast<const SubmitMarketRequest*>(
        &_SubmitMarketRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(SubmitMarketRequest& a, SubmitMarketRequest& b) { a.Swap(&b); }
  inline void Swap(SubmitMarketRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitMarketRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubmitMarketRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SubmitMarketRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubmitMarketRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SubmitMarketRequest& from) { SubmitMarketRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SubmitMarketRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fastob.SubmitMarketRequest"; }

 protected:
  explicit SubmitMarketRequest(::google::protobuf::Arena* arena);
  SubmitMarketRequest(::google::protobuf::Arena* arena, const SubmitMarketRequest& from);
  SubmitMarketRequest(::google::protobuf::Arena* arena, SubmitMarketRequest&& from) noexcept
      : SubmitMarketRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClientIdFieldNumber = 1,
    kIsBuyFieldNumber = 2,
    kQtyFieldNumber = 3,
  };
  // string client_id = 1;
  void clear_client_id() ;
  const std::string& client_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_id(Arg_&& arg, Args_... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* value);

  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(
      const std::string& value);
  std::string* _internal_mutable_client_id();

  public:
  // bool is_buy = 2;
  void clear_is_buy() ;
  bool is_buy() const;
  void set_is_buy(bool value);

  private:
  bool _internal_is_buy() const;
  void _internal_set_is_buy(bool value);

  public:
  // int32 qty = 3;
  void clear_qty() ;
  ::int32_t qty() const;
  void set_qty(::int32_t value);

  private:
  ::int32_t _internal_qty() const;
  void _internal_set_qty(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fastob.SubmitMarketRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      44, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubmitMarketRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr client_id_;
    bool is_buy_;
    ::int32_t qty_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class SubmitLimitRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fastob.SubmitLimitRequest) */ {
 public:
  inline SubmitLimitRequest() : SubmitLimitRequest(nullptr) {}
  ~SubmitLimitRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubmitLimitRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubmitLimitRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubmitLimitRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubmitLimitRequest(const SubmitLimitRequest& from) : SubmitLimitRequest(nullptr, from) {}
  inline SubmitLimitRequest(SubmitLimitRequest&& from) noexcept
      : SubmitLimitRequest(nullptr, std::move(from)) {}
  inline SubmitLimitRequest& operator=(const SubmitLimitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitLimitRequest& operator=(SubmitLimitRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubmitLimitRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubmitLimitRequest* internal_default_instance() {
    return reinterpret_cast<const SubmitLimitRequest*>(
        &_SubmitLimitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(SubmitLimitRequest& a, SubmitLimitRequest& b) { a.Swap(&b); }
  inline void Swap(SubmitLimitRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitLimitRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubmitLimitRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SubmitLimitRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubmitLimitRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SubmitLimitRequest& from) { SubmitLimitRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SubmitLimitRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fastob.SubmitLimitRequest"; }

 protected:
  explicit SubmitLimitRequest(::google::protobuf::Arena* arena);
  SubmitLimitRequest(::google::protobuf::Arena* arena, const SubmitLimitRequest& from);
  SubmitLimitRequest(::google::protobuf::Arena* arena, SubmitLimitRequest&& from) noexcept
      : SubmitLimitRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClientIdFieldNumber = 1,
    kIsBuyFieldNumber = 2,
    kPriceFieldNumber = 3,
    kQtyFieldNumber = 4,
  };
  // string client_id = 1;
  void clear_client_id() ;
  const std::string& client_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_id(Arg_&& arg, Args_... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* value);

  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(
      const std::string& value);
  std::string* _internal_mutable_client_id();

  public:
  // bool is_buy = 2;
  void clear_is_buy() ;
  bool is_buy() const;
  void set_is_buy(bool value);

  private:
  bool _internal_is_buy() const;
  void _internal_set_is_buy(bool value);

  public:
  // int32 price = 3;
  void clear_price() ;
  ::int32_t price() const;
  void set_price(::int32_t value);

  private:
  ::int32_t _internal_price() const;
  void _internal_set_price(::int32_t value);

  public:
  // int32 qty = 4;
  void clear_qty() ;
  ::int32_t qty() const;
  void set_qty(::int32_t value);

  private:
  ::int32_t _internal_qty() const;
  void _internal_set_qty(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fastob.SubmitLimitRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      43, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubmitLimitRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr client_id_;
    bool is_buy_;
    ::int32_t price_;
    ::int32_t qty_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class SubmitCancelRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fastob.SubmitCancelRequest) */ {
 public:
  inline SubmitCancelRequest() : SubmitCancelRequest(nullptr) {}
  ~SubmitCancelRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubmitCancelRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubmitCancelRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubmitCancelRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubmitCancelRequest(const SubmitCancelRequest& from) : SubmitCancelRequest(nullptr, from) {}
  inline SubmitCancelRequest(SubmitCancelRequest&& from) noexcept
      : SubmitCancelRequest(nullptr, std::move(from)) {}
  inline SubmitCancelRequest& operator=(const SubmitCancelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitCancelRequest& operator=(SubmitCancelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubmitCancelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubmitCancelRequest* internal_default_instance() {
    return reinterpret_cast<const SubmitCancelRequest*>(
        &_SubmitCancelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(SubmitCancelRequest& a, SubmitCancelRequest& b) { a.Swap(&b); }
  inline void Swap(SubmitCancelRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitCancelRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubmitCancelRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SubmitCancelRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubmitCancelRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SubmitCancelRequest& from) { SubmitCancelRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SubmitCancelRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fastob.SubmitCancelRequest"; }

 protected:
  explicit SubmitCancelRequest(::google::protobuf::Arena* arena);
  SubmitCancelRequest(::google::protobuf::Arena* arena, const SubmitCancelRequest& from);
  SubmitCancelRequest(::google::protobuf::Arena* arena, SubmitCancelRequest&& from) noexcept
      : SubmitCancelRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClientIdFieldNumber = 1,
    kIsBuyFieldNumber = 2,
    kPriceFieldNumber = 3,
    kQtyFieldNumber = 4,
  };
  // string client_id = 1;
  void clear_client_id() ;
  const std::string& client_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_id(Arg_&& arg, Args_... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* value);

  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(
      const std::string& value);
  std::string* _internal_mutable_client_id();

  public:
  // bool is_buy = 2;
  void clear_is_buy() ;
  bool is_buy() const;
  void set_is_buy(bool value);

  private:
  bool _internal_is_buy() const;
  void _internal_set_is_buy(bool value);

  public:
  // int32 price = 3;
  void clear_price() ;
  ::int32_t price() const;
  void set_price(::int32_t value);

  private:
  ::int32_t _internal_price() const;
  void _internal_set_price(::int32_t value);

  public:
  // int32 qty = 4;
  void clear_qty() ;
  ::int32_t qty() const;
  void set_qty(::int32_t value);

  private:
  ::int32_t _internal_qty() const;
  void _internal_set_qty(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fastob.SubmitCancelRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      44, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubmitCancelRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr client_id_;
    bool is_buy_;
    ::int32_t price_;
    ::int32_t qty_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class StatsRequest final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:fastob.StatsRequest) */ {
 public:
  inline StatsRequest() : StatsRequest(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StatsRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StatsRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StatsRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline StatsRequest(const StatsRequest& from) : StatsRequest(nullptr, from) {}
  inline StatsRequest(StatsRequest&& from) noexcept
      : StatsRequest(nullptr, std::move(from)) {}
  inline StatsRequest& operator=(const StatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatsRequest& operator=(StatsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatsRequest* internal_default_instance() {
    return reinterpret_cast<const StatsRequest*>(
        &_StatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(StatsRequest& a, StatsRequest& b) { a.Swap(&b); }
  inline void Swap(StatsRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatsRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<StatsRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StatsRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StatsRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fastob.StatsRequest"; }

 protected:
  explicit StatsRequest(::google::protobuf::Arena* arena);
  StatsRequest(::google::protobuf::Arena* arena, const StatsRequest& from);
  StatsRequest(::google::protobuf::Arena* arena, StatsRequest&& from) noexcept
      : StatsRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:fastob.StatsRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StatsRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class StatsReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fastob.StatsReply) */ {
 public:
  inline StatsReply() : StatsReply(nullptr) {}
  ~StatsReply() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StatsReply* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StatsReply));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StatsReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline StatsReply(const StatsReply& from) : StatsReply(nullptr, from) {}
  inline StatsReply(StatsReply&& from) noexcept
      : StatsReply(nullptr, std::move(from)) {}
  inline StatsReply& operator=(const StatsReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatsReply& operator=(StatsReply&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatsReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatsReply* internal_default_instance() {
    return reinterpret_cast<const StatsReply*>(
        &_StatsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(StatsReply& a, StatsReply& b) { a.Swap(&b); }
  inline void Swap(StatsReply* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatsReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatsReply* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StatsReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StatsReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StatsReply& from) { StatsReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StatsReply* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fastob.StatsReply"; }

 protected:
  explicit StatsReply(::google::protobuf::Arena* arena);
  StatsReply(::google::protobuf::Arena* arena, const StatsReply& from);
  StatsReply(::google::protobuf::Arena* arena, StatsReply&& from) noexcept
      : StatsReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTotalOrdersFieldNumber = 1,
    kTotalRejectedFieldNumber = 2,
    kAvgLatencyUsFieldNumber = 3,
  };
  // uint64 total_orders = 1;
  void clear_total_orders() ;
  ::uint64_t total_orders() const;
  void set_total_orders(::uint64_t value);

  private:
  ::uint64_t _internal_total_orders() const;
  void _internal_set_total_orders(::uint64_t value);

  public:
  // uint64 total_rejected = 2;
  void clear_total_rejected() ;
  ::uint64_t total_rejected() const;
  void set_total_rejected(::uint64_t value);

  private:
  ::uint64_t _internal_total_rejected() const;
  void _internal_set_total_rejected(::uint64_t value);

  public:
  // double avg_latency_us = 3;
  void clear_avg_latency_us() ;
  double avg_latency_us() const;
  void set_avg_latency_us(double value);

  private:
  double _internal_avg_latency_us() const;
  void _internal_set_avg_latency_us(double value);

  public:
  // @@protoc_insertion_point(class_scope:fastob.StatsReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StatsReply& from_msg);
    ::uint64_t total_orders_;
    ::uint64_t total_rejected_;
    double avg_latency_us_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class OrderMeta final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fastob.OrderMeta) */ {
 public:
  inline OrderMeta() : OrderMeta(nullptr) {}
  ~OrderMeta() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(OrderMeta* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(OrderMeta));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OrderMeta(
      ::google::protobuf::internal::ConstantInitialized);

  inline OrderMeta(const OrderMeta& from) : OrderMeta(nullptr, from) {}
  inline OrderMeta(OrderMeta&& from) noexcept
      : OrderMeta(nullptr, std::move(from)) {}
  inline OrderMeta& operator=(const OrderMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderMeta& operator=(OrderMeta&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderMeta* internal_default_instance() {
    return reinterpret_cast<const OrderMeta*>(
        &_OrderMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(OrderMeta& a, OrderMeta& b) { a.Swap(&b); }
  inline void Swap(OrderMeta* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderMeta* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderMeta* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<OrderMeta>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OrderMeta& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OrderMeta& from) { OrderMeta::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(OrderMeta* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fastob.OrderMeta"; }

 protected:
  explicit OrderMeta(::google::protobuf::Arena* arena);
  OrderMeta(::google::protobuf::Arena* arena, const OrderMeta& from);
  OrderMeta(::google::protobuf::Arena* arena, OrderMeta&& from) noexcept
      : OrderMeta(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClientIdFieldNumber = 1,
    kGatewayOrderIdFieldNumber = 2,
    kRiskStatusFieldNumber = 4,
    kRecvUnixNsFieldNumber = 3,
  };
  // string client_id = 1;
  void clear_client_id() ;
  const std::string& client_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_id(Arg_&& arg, Args_... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* value);

  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(
      const std::string& value);
  std::string* _internal_mutable_client_id();

  public:
  // string gateway_order_id = 2;
  void clear_gateway_order_id() ;
  const std::string& gateway_order_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_gateway_order_id(Arg_&& arg, Args_... args);
  std::string* mutable_gateway_order_id();
  PROTOBUF_NODISCARD std::string* release_gateway_order_id();
  void set_allocated_gateway_order_id(std::string* value);

  private:
  const std::string& _internal_gateway_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gateway_order_id(
      const std::string& value);
  std::string* _internal_mutable_gateway_order_id();

  public:
  // string risk_status = 4;
  void clear_risk_status() ;
  const std::string& risk_status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_risk_status(Arg_&& arg, Args_... args);
  std::string* mutable_risk_status();
  PROTOBUF_NODISCARD std::string* release_risk_status();
  void set_allocated_risk_status(std::string* value);

  private:
  const std::string& _internal_risk_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_risk_status(
      const std::string& value);
  std::string* _internal_mutable_risk_status();

  public:
  // int64 recv_unix_ns = 3;
  void clear_recv_unix_ns() ;
  ::int64_t recv_unix_ns() const;
  void set_recv_unix_ns(::int64_t value);

  private:
  ::int64_t _internal_recv_unix_ns() const;
  void _internal_set_recv_unix_ns(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fastob.OrderMeta)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      61, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OrderMeta& from_msg);
    ::google::protobuf::internal::ArenaStringPtr client_id_;
    ::google::protobuf::internal::ArenaStringPtr gateway_order_id_;
    ::google::protobuf::internal::ArenaStringPtr risk_status_;
    ::int64_t recv_unix_ns_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class MarketOrder final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fastob.MarketOrder) */ {
 public:
  inline MarketOrder() : MarketOrder(nullptr) {}
  ~MarketOrder() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MarketOrder* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MarketOrder));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MarketOrder(
      ::google::protobuf::internal::ConstantInitialized);

  inline MarketOrder(const MarketOrder& from) : MarketOrder(nullptr, from) {}
  inline MarketOrder(MarketOrder&& from) noexcept
      : MarketOrder(nullptr, std::move(from)) {}
  inline MarketOrder& operator=(const MarketOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketOrder& operator=(MarketOrder&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketOrder* internal_default_instance() {
    return reinterpret_cast<const MarketOrder*>(
        &_MarketOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(MarketOrder& a, MarketOrder& b) { a.Swap(&b); }
  inline void Swap(MarketOrder* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketOrder* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketOrder* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MarketOrder>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MarketOrder& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MarketOrder& from) { MarketOrder::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MarketOrder* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fastob.MarketOrder"; }

 protected:
  explicit MarketOrder(::google::protobuf::Arena* arena);
  MarketOrder(::google::protobuf::Arena* arena, const MarketOrder& from);
  MarketOrder(::google::protobuf::Arena* arena, MarketOrder&& from) noexcept
      : MarketOrder(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetaFieldNumber = 10,
    kIsBuyFieldNumber = 1,
    kQtyFieldNumber = 2,
  };
  // .fastob.OrderMeta meta = 10;
  bool has_meta() const;
  void clear_meta() ;
  const ::fastob::OrderMeta& meta() const;
  PROTOBUF_NODISCARD ::fastob::OrderMeta* release_meta();
  ::fastob::OrderMeta* mutable_meta();
  void set_allocated_meta(::fastob::OrderMeta* value);
  void unsafe_arena_set_allocated_meta(::fastob::OrderMeta* value);
  ::fastob::OrderMeta* unsafe_arena_release_meta();

  private:
  const ::fastob::OrderMeta& _internal_meta() const;
  ::fastob::OrderMeta* _internal_mutable_meta();

  public:
  // bool is_buy = 1;
  void clear_is_buy() ;
  bool is_buy() const;
  void set_is_buy(bool value);

  private:
  bool _internal_is_buy() const;
  void _internal_set_is_buy(bool value);

  public:
  // int32 qty = 2;
  void clear_qty() ;
  ::int32_t qty() const;
  void set_qty(::int32_t value);

  private:
  ::int32_t _internal_qty() const;
  void _internal_set_qty(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fastob.MarketOrder)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 3, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MarketOrder& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::fastob::OrderMeta* meta_;
    bool is_buy_;
    ::int32_t qty_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class LimitOrder final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fastob.LimitOrder) */ {
 public:
  inline LimitOrder() : LimitOrder(nullptr) {}
  ~LimitOrder() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LimitOrder* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LimitOrder));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LimitOrder(
      ::google::protobuf::internal::ConstantInitialized);

  inline LimitOrder(const LimitOrder& from) : LimitOrder(nullptr, from) {}
  inline LimitOrder(LimitOrder&& from) noexcept
      : LimitOrder(nullptr, std::move(from)) {}
  inline LimitOrder& operator=(const LimitOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline LimitOrder& operator=(LimitOrder&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LimitOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const LimitOrder* internal_default_instance() {
    return reinterpret_cast<const LimitOrder*>(
        &_LimitOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(LimitOrder& a, LimitOrder& b) { a.Swap(&b); }
  inline void Swap(LimitOrder* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LimitOrder* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LimitOrder* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LimitOrder>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LimitOrder& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LimitOrder& from) { LimitOrder::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LimitOrder* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fastob.LimitOrder"; }

 protected:
  explicit LimitOrder(::google::protobuf::Arena* arena);
  LimitOrder(::google::protobuf::Arena* arena, const LimitOrder& from);
  LimitOrder(::google::protobuf::Arena* arena, LimitOrder&& from) noexcept
      : LimitOrder(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetaFieldNumber = 10,
    kIsBuyFieldNumber = 1,
    kPriceFieldNumber = 2,
    kQtyFieldNumber = 3,
  };
  // .fastob.OrderMeta meta = 10;
  bool has_meta() const;
  void clear_meta() ;
  const ::fastob::OrderMeta& meta() const;
  PROTOBUF_NODISCARD ::fastob::OrderMeta* release_meta();
  ::fastob::OrderMeta* mutable_meta();
  void set_allocated_meta(::fastob::OrderMeta* value);
  void unsafe_arena_set_allocated_meta(::fastob::OrderMeta* value);
  ::fastob::OrderMeta* unsafe_arena_release_meta();

  private:
  const ::fastob::OrderMeta& _internal_meta() const;
  ::fastob::OrderMeta* _internal_mutable_meta();

  public:
  // bool is_buy = 1;
  void clear_is_buy() ;
  bool is_buy() const;
  void set_is_buy(bool value);

  private:
  bool _internal_is_buy() const;
  void _internal_set_is_buy(bool value);

  public:
  // int32 price = 2;
  void clear_price() ;
  ::int32_t price() const;
  void set_price(::int32_t value);

  private:
  ::int32_t _internal_price() const;
  void _internal_set_price(::int32_t value);

  public:
  // int32 qty = 3;
  void clear_qty() ;
  ::int32_t qty() const;
  void set_qty(::int32_t value);

  private:
  ::int32_t _internal_qty() const;
  void _internal_set_qty(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fastob.LimitOrder)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LimitOrder& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::fastob::OrderMeta* meta_;
    bool is_buy_;
    ::int32_t price_;
    ::int32_t qty_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class CancelOrder final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fastob.CancelOrder) */ {
 public:
  inline CancelOrder() : CancelOrder(nullptr) {}
  ~CancelOrder() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CancelOrder* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CancelOrder));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CancelOrder(
      ::google::protobuf::internal::ConstantInitialized);

  inline CancelOrder(const CancelOrder& from) : CancelOrder(nullptr, from) {}
  inline CancelOrder(CancelOrder&& from) noexcept
      : CancelOrder(nullptr, std::move(from)) {}
  inline CancelOrder& operator=(const CancelOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelOrder& operator=(CancelOrder&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelOrder* internal_default_instance() {
    return reinterpret_cast<const CancelOrder*>(
        &_CancelOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(CancelOrder& a, CancelOrder& b) { a.Swap(&b); }
  inline void Swap(CancelOrder* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelOrder* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelOrder* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CancelOrder>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CancelOrder& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CancelOrder& from) { CancelOrder::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CancelOrder* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fastob.CancelOrder"; }

 protected:
  explicit CancelOrder(::google::protobuf::Arena* arena);
  CancelOrder(::google::protobuf::Arena* arena, const CancelOrder& from);
  CancelOrder(::google::protobuf::Arena* arena, CancelOrder&& from) noexcept
      : CancelOrder(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetaFieldNumber = 10,
    kIsBuyFieldNumber = 1,
    kPriceFieldNumber = 2,
    kQtyFieldNumber = 3,
  };
  // .fastob.OrderMeta meta = 10;
  bool has_meta() const;
  void clear_meta() ;
  const ::fastob::OrderMeta& meta() const;
  PROTOBUF_NODISCARD ::fastob::OrderMeta* release_meta();
  ::fastob::OrderMeta* mutable_meta();
  void set_allocated_meta(::fastob::OrderMeta* value);
  void unsafe_arena_set_allocated_meta(::fastob::OrderMeta* value);
  ::fastob::OrderMeta* unsafe_arena_release_meta();

  private:
  const ::fastob::OrderMeta& _internal_meta() const;
  ::fastob::OrderMeta* _internal_mutable_meta();

  public:
  // bool is_buy = 1;
  void clear_is_buy() ;
  bool is_buy() const;
  void set_is_buy(bool value);

  private:
  bool _internal_is_buy() const;
  void _internal_set_is_buy(bool value);

  public:
  // int32 price = 2;
  void clear_price() ;
  ::int32_t price() const;
  void set_price(::int32_t value);

  private:
  ::int32_t _internal_price() const;
  void _internal_set_price(::int32_t value);

  public:
  // int32 qty = 3;
  void clear_qty() ;
  ::int32_t qty() const;
  void set_qty(::int32_t value);

  private:
  ::int32_t _internal_qty() const;
  void _internal_set_qty(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fastob.CancelOrder)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CancelOrder& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::fastob::OrderMeta* meta_;
    bool is_buy_;
    ::int32_t price_;
    ::int32_t qty_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class Ack final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fastob.Ack) */ {
 public:
  inline Ack() : Ack(nullptr) {}
  ~Ack() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Ack* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Ack));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Ack(
      ::google::protobuf::internal::ConstantInitialized);

  inline Ack(const Ack& from) : Ack(nullptr, from) {}
  inline Ack(Ack&& from) noexcept
      : Ack(nullptr, std::move(from)) {}
  inline Ack& operator=(const Ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ack& operator=(Ack&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ack* internal_default_instance() {
    return reinterpret_cast<const Ack*>(
        &_Ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(Ack& a, Ack& b) { a.Swap(&b); }
  inline void Swap(Ack* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ack* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ack* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Ack>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Ack& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Ack& from) { Ack::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Ack* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fastob.Ack"; }

 protected:
  explicit Ack(::google::protobuf::Arena* arena);
  Ack(::google::protobuf::Arena* arena, const Ack& from);
  Ack(::google::protobuf::Arena* arena, Ack&& from) noexcept
      : Ack(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kMetaFieldNumber = 3,
    kOkFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .fastob.OrderMeta meta = 3;
  bool has_meta() const;
  void clear_meta() ;
  const ::fastob::OrderMeta& meta() const;
  PROTOBUF_NODISCARD ::fastob::OrderMeta* release_meta();
  ::fastob::OrderMeta* mutable_meta();
  void set_allocated_meta(::fastob::OrderMeta* value);
  void unsafe_arena_set_allocated_meta(::fastob::OrderMeta* value);
  ::fastob::OrderMeta* unsafe_arena_release_meta();

  private:
  const ::fastob::OrderMeta& _internal_meta() const;
  ::fastob::OrderMeta* _internal_mutable_meta();

  public:
  // bool ok = 1;
  void clear_ok() ;
  bool ok() const;
  void set_ok(bool value);

  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fastob.Ack)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      26, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Ack& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::fastob::OrderMeta* meta_;
    bool ok_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_order_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// OrderMeta

// string client_id = 1;
inline void OrderMeta::clear_client_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& OrderMeta::client_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fastob.OrderMeta.client_id)
  return _internal_client_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderMeta::set_client_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fastob.OrderMeta.client_id)
}
inline std::string* OrderMeta::mutable_client_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:fastob.OrderMeta.client_id)
  return _s;
}
inline const std::string& OrderMeta::_internal_client_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.client_id_.Get();
}
inline void OrderMeta::_internal_set_client_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.Set(value, GetArena());
}
inline std::string* OrderMeta::_internal_mutable_client_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.client_id_.Mutable( GetArena());
}
inline std::string* OrderMeta::release_client_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fastob.OrderMeta.client_id)
  return _impl_.client_id_.Release();
}
inline void OrderMeta::set_allocated_client_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.client_id_.IsDefault()) {
    _impl_.client_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fastob.OrderMeta.client_id)
}

// string gateway_order_id = 2;
inline void OrderMeta::clear_gateway_order_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gateway_order_id_.ClearToEmpty();
}
inline const std::string& OrderMeta::gateway_order_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fastob.OrderMeta.gateway_order_id)
  return _internal_gateway_order_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderMeta::set_gateway_order_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gateway_order_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fastob.OrderMeta.gateway_order_id)
}
inline std::string* OrderMeta::mutable_gateway_order_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_gateway_order_id();
  // @@protoc_insertion_point(field_mutable:fastob.OrderMeta.gateway_order_id)
  return _s;
}
inline const std::string& OrderMeta::_internal_gateway_order_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gateway_order_id_.Get();
}
inline void OrderMeta::_internal_set_gateway_order_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gateway_order_id_.Set(value, GetArena());
}
inline std::string* OrderMeta::_internal_mutable_gateway_order_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.gateway_order_id_.Mutable( GetArena());
}
inline std::string* OrderMeta::release_gateway_order_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fastob.OrderMeta.gateway_order_id)
  return _impl_.gateway_order_id_.Release();
}
inline void OrderMeta::set_allocated_gateway_order_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gateway_order_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.gateway_order_id_.IsDefault()) {
    _impl_.gateway_order_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fastob.OrderMeta.gateway_order_id)
}

// int64 recv_unix_ns = 3;
inline void OrderMeta::clear_recv_unix_ns() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recv_unix_ns_ = ::int64_t{0};
}
inline ::int64_t OrderMeta::recv_unix_ns() const {
  // @@protoc_insertion_point(field_get:fastob.OrderMeta.recv_unix_ns)
  return _internal_recv_unix_ns();
}
inline void OrderMeta::set_recv_unix_ns(::int64_t value) {
  _internal_set_recv_unix_ns(value);
  // @@protoc_insertion_point(field_set:fastob.OrderMeta.recv_unix_ns)
}
inline ::int64_t OrderMeta::_internal_recv_unix_ns() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recv_unix_ns_;
}
inline void OrderMeta::_internal_set_recv_unix_ns(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recv_unix_ns_ = value;
}

// string risk_status = 4;
inline void OrderMeta::clear_risk_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.risk_status_.ClearToEmpty();
}
inline const std::string& OrderMeta::risk_status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fastob.OrderMeta.risk_status)
  return _internal_risk_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderMeta::set_risk_status(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.risk_status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fastob.OrderMeta.risk_status)
}
inline std::string* OrderMeta::mutable_risk_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_risk_status();
  // @@protoc_insertion_point(field_mutable:fastob.OrderMeta.risk_status)
  return _s;
}
inline const std::string& OrderMeta::_internal_risk_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.risk_status_.Get();
}
inline void OrderMeta::_internal_set_risk_status(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.risk_status_.Set(value, GetArena());
}
inline std::string* OrderMeta::_internal_mutable_risk_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.risk_status_.Mutable( GetArena());
}
inline std::string* OrderMeta::release_risk_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fastob.OrderMeta.risk_status)
  return _impl_.risk_status_.Release();
}
inline void OrderMeta::set_allocated_risk_status(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.risk_status_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.risk_status_.IsDefault()) {
    _impl_.risk_status_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fastob.OrderMeta.risk_status)
}

// -------------------------------------------------------------------

// LimitOrder

// bool is_buy = 1;
inline void LimitOrder::clear_is_buy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_buy_ = false;
}
inline bool LimitOrder::is_buy() const {
  // @@protoc_insertion_point(field_get:fastob.LimitOrder.is_buy)
  return _internal_is_buy();
}
inline void LimitOrder::set_is_buy(bool value) {
  _internal_set_is_buy(value);
  // @@protoc_insertion_point(field_set:fastob.LimitOrder.is_buy)
}
inline bool LimitOrder::_internal_is_buy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_buy_;
}
inline void LimitOrder::_internal_set_is_buy(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_buy_ = value;
}

// int32 price = 2;
inline void LimitOrder::clear_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = 0;
}
inline ::int32_t LimitOrder::price() const {
  // @@protoc_insertion_point(field_get:fastob.LimitOrder.price)
  return _internal_price();
}
inline void LimitOrder::set_price(::int32_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:fastob.LimitOrder.price)
}
inline ::int32_t LimitOrder::_internal_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.price_;
}
inline void LimitOrder::_internal_set_price(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = value;
}

// int32 qty = 3;
inline void LimitOrder::clear_qty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.qty_ = 0;
}
inline ::int32_t LimitOrder::qty() const {
  // @@protoc_insertion_point(field_get:fastob.LimitOrder.qty)
  return _internal_qty();
}
inline void LimitOrder::set_qty(::int32_t value) {
  _internal_set_qty(value);
  // @@protoc_insertion_point(field_set:fastob.LimitOrder.qty)
}
inline ::int32_t LimitOrder::_internal_qty() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.qty_;
}
inline void LimitOrder::_internal_set_qty(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.qty_ = value;
}

// .fastob.OrderMeta meta = 10;
inline bool LimitOrder::has_meta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.meta_ != nullptr);
  return value;
}
inline void LimitOrder::clear_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.meta_ != nullptr) _impl_.meta_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fastob::OrderMeta& LimitOrder::_internal_meta() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fastob::OrderMeta* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::fastob::OrderMeta&>(::fastob::_OrderMeta_default_instance_);
}
inline const ::fastob::OrderMeta& LimitOrder::meta() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fastob.LimitOrder.meta)
  return _internal_meta();
}
inline void LimitOrder::unsafe_arena_set_allocated_meta(::fastob::OrderMeta* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = reinterpret_cast<::fastob::OrderMeta*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fastob.LimitOrder.meta)
}
inline ::fastob::OrderMeta* LimitOrder::release_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fastob::OrderMeta* released = _impl_.meta_;
  _impl_.meta_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::fastob::OrderMeta* LimitOrder::unsafe_arena_release_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fastob.LimitOrder.meta)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fastob::OrderMeta* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::fastob::OrderMeta* LimitOrder::_internal_mutable_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.meta_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fastob::OrderMeta>(GetArena());
    _impl_.meta_ = reinterpret_cast<::fastob::OrderMeta*>(p);
  }
  return _impl_.meta_;
}
inline ::fastob::OrderMeta* LimitOrder::mutable_meta() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fastob::OrderMeta* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:fastob.LimitOrder.meta)
  return _msg;
}
inline void LimitOrder::set_allocated_meta(::fastob::OrderMeta* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.meta_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.meta_ = reinterpret_cast<::fastob::OrderMeta*>(value);
  // @@protoc_insertion_point(field_set_allocated:fastob.LimitOrder.meta)
}

// -------------------------------------------------------------------

// MarketOrder

// bool is_buy = 1;
inline void MarketOrder::clear_is_buy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_buy_ = false;
}
inline bool MarketOrder::is_buy() const {
  // @@protoc_insertion_point(field_get:fastob.MarketOrder.is_buy)
  return _internal_is_buy();
}
inline void MarketOrder::set_is_buy(bool value) {
  _internal_set_is_buy(value);
  // @@protoc_insertion_point(field_set:fastob.MarketOrder.is_buy)
}
inline bool MarketOrder::_internal_is_buy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_buy_;
}
inline void MarketOrder::_internal_set_is_buy(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_buy_ = value;
}

// int32 qty = 2;
inline void MarketOrder::clear_qty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.qty_ = 0;
}
inline ::int32_t MarketOrder::qty() const {
  // @@protoc_insertion_point(field_get:fastob.MarketOrder.qty)
  return _internal_qty();
}
inline void MarketOrder::set_qty(::int32_t value) {
  _internal_set_qty(value);
  // @@protoc_insertion_point(field_set:fastob.MarketOrder.qty)
}
inline ::int32_t MarketOrder::_internal_qty() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.qty_;
}
inline void MarketOrder::_internal_set_qty(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.qty_ = value;
}

// .fastob.OrderMeta meta = 10;
inline bool MarketOrder::has_meta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.meta_ != nullptr);
  return value;
}
inline void MarketOrder::clear_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.meta_ != nullptr) _impl_.meta_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fastob::OrderMeta& MarketOrder::_internal_meta() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fastob::OrderMeta* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::fastob::OrderMeta&>(::fastob::_OrderMeta_default_instance_);
}
inline const ::fastob::OrderMeta& MarketOrder::meta() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fastob.MarketOrder.meta)
  return _internal_meta();
}
inline void MarketOrder::unsafe_arena_set_allocated_meta(::fastob::OrderMeta* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = reinterpret_cast<::fastob::OrderMeta*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fastob.MarketOrder.meta)
}
inline ::fastob::OrderMeta* MarketOrder::release_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fastob::OrderMeta* released = _impl_.meta_;
  _impl_.meta_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::fastob::OrderMeta* MarketOrder::unsafe_arena_release_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fastob.MarketOrder.meta)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fastob::OrderMeta* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::fastob::OrderMeta* MarketOrder::_internal_mutable_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.meta_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fastob::OrderMeta>(GetArena());
    _impl_.meta_ = reinterpret_cast<::fastob::OrderMeta*>(p);
  }
  return _impl_.meta_;
}
inline ::fastob::OrderMeta* MarketOrder::mutable_meta() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fastob::OrderMeta* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:fastob.MarketOrder.meta)
  return _msg;
}
inline void MarketOrder::set_allocated_meta(::fastob::OrderMeta* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.meta_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.meta_ = reinterpret_cast<::fastob::OrderMeta*>(value);
  // @@protoc_insertion_point(field_set_allocated:fastob.MarketOrder.meta)
}

// -------------------------------------------------------------------

// CancelOrder

// bool is_buy = 1;
inline void CancelOrder::clear_is_buy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_buy_ = false;
}
inline bool CancelOrder::is_buy() const {
  // @@protoc_insertion_point(field_get:fastob.CancelOrder.is_buy)
  return _internal_is_buy();
}
inline void CancelOrder::set_is_buy(bool value) {
  _internal_set_is_buy(value);
  // @@protoc_insertion_point(field_set:fastob.CancelOrder.is_buy)
}
inline bool CancelOrder::_internal_is_buy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_buy_;
}
inline void CancelOrder::_internal_set_is_buy(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_buy_ = value;
}

// int32 price = 2;
inline void CancelOrder::clear_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = 0;
}
inline ::int32_t CancelOrder::price() const {
  // @@protoc_insertion_point(field_get:fastob.CancelOrder.price)
  return _internal_price();
}
inline void CancelOrder::set_price(::int32_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:fastob.CancelOrder.price)
}
inline ::int32_t CancelOrder::_internal_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.price_;
}
inline void CancelOrder::_internal_set_price(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = value;
}

// int32 qty = 3;
inline void CancelOrder::clear_qty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.qty_ = 0;
}
inline ::int32_t CancelOrder::qty() const {
  // @@protoc_insertion_point(field_get:fastob.CancelOrder.qty)
  return _internal_qty();
}
inline void CancelOrder::set_qty(::int32_t value) {
  _internal_set_qty(value);
  // @@protoc_insertion_point(field_set:fastob.CancelOrder.qty)
}
inline ::int32_t CancelOrder::_internal_qty() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.qty_;
}
inline void CancelOrder::_internal_set_qty(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.qty_ = value;
}

// .fastob.OrderMeta meta = 10;
inline bool CancelOrder::has_meta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.meta_ != nullptr);
  return value;
}
inline void CancelOrder::clear_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.meta_ != nullptr) _impl_.meta_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fastob::OrderMeta& CancelOrder::_internal_meta() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fastob::OrderMeta* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::fastob::OrderMeta&>(::fastob::_OrderMeta_default_instance_);
}
inline const ::fastob::OrderMeta& CancelOrder::meta() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fastob.CancelOrder.meta)
  return _internal_meta();
}
inline void CancelOrder::unsafe_arena_set_allocated_meta(::fastob::OrderMeta* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = reinterpret_cast<::fastob::OrderMeta*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fastob.CancelOrder.meta)
}
inline ::fastob::OrderMeta* CancelOrder::release_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fastob::OrderMeta* released = _impl_.meta_;
  _impl_.meta_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::fastob::OrderMeta* CancelOrder::unsafe_arena_release_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fastob.CancelOrder.meta)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fastob::OrderMeta* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::fastob::OrderMeta* CancelOrder::_internal_mutable_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.meta_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fastob::OrderMeta>(GetArena());
    _impl_.meta_ = reinterpret_cast<::fastob::OrderMeta*>(p);
  }
  return _impl_.meta_;
}
inline ::fastob::OrderMeta* CancelOrder::mutable_meta() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fastob::OrderMeta* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:fastob.CancelOrder.meta)
  return _msg;
}
inline void CancelOrder::set_allocated_meta(::fastob::OrderMeta* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.meta_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.meta_ = reinterpret_cast<::fastob::OrderMeta*>(value);
  // @@protoc_insertion_point(field_set_allocated:fastob.CancelOrder.meta)
}

// -------------------------------------------------------------------

// SubmitLimitRequest

// string client_id = 1;
inline void SubmitLimitRequest::clear_client_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& SubmitLimitRequest::client_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fastob.SubmitLimitRequest.client_id)
  return _internal_client_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubmitLimitRequest::set_client_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fastob.SubmitLimitRequest.client_id)
}
inline std::string* SubmitLimitRequest::mutable_client_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:fastob.SubmitLimitRequest.client_id)
  return _s;
}
inline const std::string& SubmitLimitRequest::_internal_client_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.client_id_.Get();
}
inline void SubmitLimitRequest::_internal_set_client_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.Set(value, GetArena());
}
inline std::string* SubmitLimitRequest::_internal_mutable_client_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.client_id_.Mutable( GetArena());
}
inline std::string* SubmitLimitRequest::release_client_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fastob.SubmitLimitRequest.client_id)
  return _impl_.client_id_.Release();
}
inline void SubmitLimitRequest::set_allocated_client_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.client_id_.IsDefault()) {
    _impl_.client_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fastob.SubmitLimitRequest.client_id)
}

// bool is_buy = 2;
inline void SubmitLimitRequest::clear_is_buy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_buy_ = false;
}
inline bool SubmitLimitRequest::is_buy() const {
  // @@protoc_insertion_point(field_get:fastob.SubmitLimitRequest.is_buy)
  return _internal_is_buy();
}
inline void SubmitLimitRequest::set_is_buy(bool value) {
  _internal_set_is_buy(value);
  // @@protoc_insertion_point(field_set:fastob.SubmitLimitRequest.is_buy)
}
inline bool SubmitLimitRequest::_internal_is_buy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_buy_;
}
inline void SubmitLimitRequest::_internal_set_is_buy(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_buy_ = value;
}

// int32 price = 3;
inline void SubmitLimitRequest::clear_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = 0;
}
inline ::int32_t SubmitLimitRequest::price() const {
  // @@protoc_insertion_point(field_get:fastob.SubmitLimitRequest.price)
  return _internal_price();
}
inline void SubmitLimitRequest::set_price(::int32_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:fastob.SubmitLimitRequest.price)
}
inline ::int32_t SubmitLimitRequest::_internal_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.price_;
}
inline void SubmitLimitRequest::_internal_set_price(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = value;
}

// int32 qty = 4;
inline void SubmitLimitRequest::clear_qty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.qty_ = 0;
}
inline ::int32_t SubmitLimitRequest::qty() const {
  // @@protoc_insertion_point(field_get:fastob.SubmitLimitRequest.qty)
  return _internal_qty();
}
inline void SubmitLimitRequest::set_qty(::int32_t value) {
  _internal_set_qty(value);
  // @@protoc_insertion_point(field_set:fastob.SubmitLimitRequest.qty)
}
inline ::int32_t SubmitLimitRequest::_internal_qty() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.qty_;
}
inline void SubmitLimitRequest::_internal_set_qty(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.qty_ = value;
}

// -------------------------------------------------------------------

// SubmitMarketRequest

// string client_id = 1;
inline void SubmitMarketRequest::clear_client_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& SubmitMarketRequest::client_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fastob.SubmitMarketRequest.client_id)
  return _internal_client_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubmitMarketRequest::set_client_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fastob.SubmitMarketRequest.client_id)
}
inline std::string* SubmitMarketRequest::mutable_client_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:fastob.SubmitMarketRequest.client_id)
  return _s;
}
inline const std::string& SubmitMarketRequest::_internal_client_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.client_id_.Get();
}
inline void SubmitMarketRequest::_internal_set_client_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.Set(value, GetArena());
}
inline std::string* SubmitMarketRequest::_internal_mutable_client_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.client_id_.Mutable( GetArena());
}
inline std::string* SubmitMarketRequest::release_client_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fastob.SubmitMarketRequest.client_id)
  return _impl_.client_id_.Release();
}
inline void SubmitMarketRequest::set_allocated_client_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.client_id_.IsDefault()) {
    _impl_.client_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fastob.SubmitMarketRequest.client_id)
}

// bool is_buy = 2;
inline void SubmitMarketRequest::clear_is_buy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_buy_ = false;
}
inline bool SubmitMarketRequest::is_buy() const {
  // @@protoc_insertion_point(field_get:fastob.SubmitMarketRequest.is_buy)
  return _internal_is_buy();
}
inline void SubmitMarketRequest::set_is_buy(bool value) {
  _internal_set_is_buy(value);
  // @@protoc_insertion_point(field_set:fastob.SubmitMarketRequest.is_buy)
}
inline bool SubmitMarketRequest::_internal_is_buy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_buy_;
}
inline void SubmitMarketRequest::_internal_set_is_buy(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_buy_ = value;
}

// int32 qty = 3;
inline void SubmitMarketRequest::clear_qty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.qty_ = 0;
}
inline ::int32_t SubmitMarketRequest::qty() const {
  // @@protoc_insertion_point(field_get:fastob.SubmitMarketRequest.qty)
  return _internal_qty();
}
inline void SubmitMarketRequest::set_qty(::int32_t value) {
  _internal_set_qty(value);
  // @@protoc_insertion_point(field_set:fastob.SubmitMarketRequest.qty)
}
inline ::int32_t SubmitMarketRequest::_internal_qty() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.qty_;
}
inline void SubmitMarketRequest::_internal_set_qty(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.qty_ = value;
}

// -------------------------------------------------------------------

// SubmitCancelRequest

// string client_id = 1;
inline void SubmitCancelRequest::clear_client_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& SubmitCancelRequest::client_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fastob.SubmitCancelRequest.client_id)
  return _internal_client_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubmitCancelRequest::set_client_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fastob.SubmitCancelRequest.client_id)
}
inline std::string* SubmitCancelRequest::mutable_client_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:fastob.SubmitCancelRequest.client_id)
  return _s;
}
inline const std::string& SubmitCancelRequest::_internal_client_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.client_id_.Get();
}
inline void SubmitCancelRequest::_internal_set_client_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.Set(value, GetArena());
}
inline std::string* SubmitCancelRequest::_internal_mutable_client_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.client_id_.Mutable( GetArena());
}
inline std::string* SubmitCancelRequest::release_client_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fastob.SubmitCancelRequest.client_id)
  return _impl_.client_id_.Release();
}
inline void SubmitCancelRequest::set_allocated_client_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.client_id_.IsDefault()) {
    _impl_.client_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fastob.SubmitCancelRequest.client_id)
}

// bool is_buy = 2;
inline void SubmitCancelRequest::clear_is_buy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_buy_ = false;
}
inline bool SubmitCancelRequest::is_buy() const {
  // @@protoc_insertion_point(field_get:fastob.SubmitCancelRequest.is_buy)
  return _internal_is_buy();
}
inline void SubmitCancelRequest::set_is_buy(bool value) {
  _internal_set_is_buy(value);
  // @@protoc_insertion_point(field_set:fastob.SubmitCancelRequest.is_buy)
}
inline bool SubmitCancelRequest::_internal_is_buy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_buy_;
}
inline void SubmitCancelRequest::_internal_set_is_buy(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_buy_ = value;
}

// int32 price = 3;
inline void SubmitCancelRequest::clear_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = 0;
}
inline ::int32_t SubmitCancelRequest::price() const {
  // @@protoc_insertion_point(field_get:fastob.SubmitCancelRequest.price)
  return _internal_price();
}
inline void SubmitCancelRequest::set_price(::int32_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:fastob.SubmitCancelRequest.price)
}
inline ::int32_t SubmitCancelRequest::_internal_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.price_;
}
inline void SubmitCancelRequest::_internal_set_price(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = value;
}

// int32 qty = 4;
inline void SubmitCancelRequest::clear_qty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.qty_ = 0;
}
inline ::int32_t SubmitCancelRequest::qty() const {
  // @@protoc_insertion_point(field_get:fastob.SubmitCancelRequest.qty)
  return _internal_qty();
}
inline void SubmitCancelRequest::set_qty(::int32_t value) {
  _internal_set_qty(value);
  // @@protoc_insertion_point(field_set:fastob.SubmitCancelRequest.qty)
}
inline ::int32_t SubmitCancelRequest::_internal_qty() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.qty_;
}
inline void SubmitCancelRequest::_internal_set_qty(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.qty_ = value;
}

// -------------------------------------------------------------------

// Ack

// bool ok = 1;
inline void Ack::clear_ok() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ok_ = false;
}
inline bool Ack::ok() const {
  // @@protoc_insertion_point(field_get:fastob.Ack.ok)
  return _internal_ok();
}
inline void Ack::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:fastob.Ack.ok)
}
inline bool Ack::_internal_ok() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ok_;
}
inline void Ack::_internal_set_ok(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ok_ = value;
}

// string message = 2;
inline void Ack::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& Ack::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fastob.Ack.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Ack::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fastob.Ack.message)
}
inline std::string* Ack::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:fastob.Ack.message)
  return _s;
}
inline const std::string& Ack::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void Ack::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* Ack::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* Ack::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fastob.Ack.message)
  return _impl_.message_.Release();
}
inline void Ack::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fastob.Ack.message)
}

// .fastob.OrderMeta meta = 3;
inline bool Ack::has_meta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.meta_ != nullptr);
  return value;
}
inline void Ack::clear_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.meta_ != nullptr) _impl_.meta_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fastob::OrderMeta& Ack::_internal_meta() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fastob::OrderMeta* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::fastob::OrderMeta&>(::fastob::_OrderMeta_default_instance_);
}
inline const ::fastob::OrderMeta& Ack::meta() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fastob.Ack.meta)
  return _internal_meta();
}
inline void Ack::unsafe_arena_set_allocated_meta(::fastob::OrderMeta* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = reinterpret_cast<::fastob::OrderMeta*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fastob.Ack.meta)
}
inline ::fastob::OrderMeta* Ack::release_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fastob::OrderMeta* released = _impl_.meta_;
  _impl_.meta_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::fastob::OrderMeta* Ack::unsafe_arena_release_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fastob.Ack.meta)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fastob::OrderMeta* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::fastob::OrderMeta* Ack::_internal_mutable_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.meta_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fastob::OrderMeta>(GetArena());
    _impl_.meta_ = reinterpret_cast<::fastob::OrderMeta*>(p);
  }
  return _impl_.meta_;
}
inline ::fastob::OrderMeta* Ack::mutable_meta() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fastob::OrderMeta* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:fastob.Ack.meta)
  return _msg;
}
inline void Ack::set_allocated_meta(::fastob::OrderMeta* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.meta_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.meta_ = reinterpret_cast<::fastob::OrderMeta*>(value);
  // @@protoc_insertion_point(field_set_allocated:fastob.Ack.meta)
}

// -------------------------------------------------------------------

// TopRequest

// -------------------------------------------------------------------

// TopReply

// int32 best_bid = 1;
inline void TopReply::clear_best_bid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.best_bid_ = 0;
}
inline ::int32_t TopReply::best_bid() const {
  // @@protoc_insertion_point(field_get:fastob.TopReply.best_bid)
  return _internal_best_bid();
}
inline void TopReply::set_best_bid(::int32_t value) {
  _internal_set_best_bid(value);
  // @@protoc_insertion_point(field_set:fastob.TopReply.best_bid)
}
inline ::int32_t TopReply::_internal_best_bid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.best_bid_;
}
inline void TopReply::_internal_set_best_bid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.best_bid_ = value;
}

// int32 best_ask = 2;
inline void TopReply::clear_best_ask() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.best_ask_ = 0;
}
inline ::int32_t TopReply::best_ask() const {
  // @@protoc_insertion_point(field_get:fastob.TopReply.best_ask)
  return _internal_best_ask();
}
inline void TopReply::set_best_ask(::int32_t value) {
  _internal_set_best_ask(value);
  // @@protoc_insertion_point(field_set:fastob.TopReply.best_ask)
}
inline ::int32_t TopReply::_internal_best_ask() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.best_ask_;
}
inline void TopReply::_internal_set_best_ask(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.best_ask_ = value;
}

// -------------------------------------------------------------------

// StatsRequest

// -------------------------------------------------------------------

// StatsReply

// uint64 total_orders = 1;
inline void StatsReply::clear_total_orders() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_orders_ = ::uint64_t{0u};
}
inline ::uint64_t StatsReply::total_orders() const {
  // @@protoc_insertion_point(field_get:fastob.StatsReply.total_orders)
  return _internal_total_orders();
}
inline void StatsReply::set_total_orders(::uint64_t value) {
  _internal_set_total_orders(value);
  // @@protoc_insertion_point(field_set:fastob.StatsReply.total_orders)
}
inline ::uint64_t StatsReply::_internal_total_orders() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_orders_;
}
inline void StatsReply::_internal_set_total_orders(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_orders_ = value;
}

// uint64 total_rejected = 2;
inline void StatsReply::clear_total_rejected() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_rejected_ = ::uint64_t{0u};
}
inline ::uint64_t StatsReply::total_rejected() const {
  // @@protoc_insertion_point(field_get:fastob.StatsReply.total_rejected)
  return _internal_total_rejected();
}
inline void StatsReply::set_total_rejected(::uint64_t value) {
  _internal_set_total_rejected(value);
  // @@protoc_insertion_point(field_set:fastob.StatsReply.total_rejected)
}
inline ::uint64_t StatsReply::_internal_total_rejected() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_rejected_;
}
inline void StatsReply::_internal_set_total_rejected(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_rejected_ = value;
}

// double avg_latency_us = 3;
inline void StatsReply::clear_avg_latency_us() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.avg_latency_us_ = 0;
}
inline double StatsReply::avg_latency_us() const {
  // @@protoc_insertion_point(field_get:fastob.StatsReply.avg_latency_us)
  return _internal_avg_latency_us();
}
inline void StatsReply::set_avg_latency_us(double value) {
  _internal_set_avg_latency_us(value);
  // @@protoc_insertion_point(field_set:fastob.StatsReply.avg_latency_us)
}
inline double StatsReply::_internal_avg_latency_us() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.avg_latency_us_;
}
inline void StatsReply::_internal_set_avg_latency_us(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.avg_latency_us_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace fastob


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // order_2eproto_2epb_2eh
