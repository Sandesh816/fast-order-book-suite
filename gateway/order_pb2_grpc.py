# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import order_pb2 as order__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in order_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class EngineInternalStub(object):
    """---- Engine (C++ internal) ----
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Limit = channel.unary_unary(
                '/fastob.EngineInternal/Limit',
                request_serializer=order__pb2.LimitOrder.SerializeToString,
                response_deserializer=order__pb2.Ack.FromString,
                _registered_method=True)
        self.Market = channel.unary_unary(
                '/fastob.EngineInternal/Market',
                request_serializer=order__pb2.MarketOrder.SerializeToString,
                response_deserializer=order__pb2.Ack.FromString,
                _registered_method=True)
        self.Cancel = channel.unary_unary(
                '/fastob.EngineInternal/Cancel',
                request_serializer=order__pb2.CancelOrder.SerializeToString,
                response_deserializer=order__pb2.Ack.FromString,
                _registered_method=True)
        self.Top = channel.unary_unary(
                '/fastob.EngineInternal/Top',
                request_serializer=order__pb2.TopRequest.SerializeToString,
                response_deserializer=order__pb2.TopReply.FromString,
                _registered_method=True)


class EngineInternalServicer(object):
    """---- Engine (C++ internal) ----
    """

    def Limit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Market(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Cancel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Top(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EngineInternalServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Limit': grpc.unary_unary_rpc_method_handler(
                    servicer.Limit,
                    request_deserializer=order__pb2.LimitOrder.FromString,
                    response_serializer=order__pb2.Ack.SerializeToString,
            ),
            'Market': grpc.unary_unary_rpc_method_handler(
                    servicer.Market,
                    request_deserializer=order__pb2.MarketOrder.FromString,
                    response_serializer=order__pb2.Ack.SerializeToString,
            ),
            'Cancel': grpc.unary_unary_rpc_method_handler(
                    servicer.Cancel,
                    request_deserializer=order__pb2.CancelOrder.FromString,
                    response_serializer=order__pb2.Ack.SerializeToString,
            ),
            'Top': grpc.unary_unary_rpc_method_handler(
                    servicer.Top,
                    request_deserializer=order__pb2.TopRequest.FromString,
                    response_serializer=order__pb2.TopReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fastob.EngineInternal', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('fastob.EngineInternal', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class EngineInternal(object):
    """---- Engine (C++ internal) ----
    """

    @staticmethod
    def Limit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fastob.EngineInternal/Limit',
            order__pb2.LimitOrder.SerializeToString,
            order__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Market(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fastob.EngineInternal/Market',
            order__pb2.MarketOrder.SerializeToString,
            order__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Cancel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fastob.EngineInternal/Cancel',
            order__pb2.CancelOrder.SerializeToString,
            order__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Top(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fastob.EngineInternal/Top',
            order__pb2.TopRequest.SerializeToString,
            order__pb2.TopReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class GatewayPublicStub(object):
    """---- Public Gateway (Python async) ----
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubmitLimit = channel.unary_unary(
                '/fastob.GatewayPublic/SubmitLimit',
                request_serializer=order__pb2.SubmitLimitRequest.SerializeToString,
                response_deserializer=order__pb2.Ack.FromString,
                _registered_method=True)
        self.SubmitMarket = channel.unary_unary(
                '/fastob.GatewayPublic/SubmitMarket',
                request_serializer=order__pb2.SubmitMarketRequest.SerializeToString,
                response_deserializer=order__pb2.Ack.FromString,
                _registered_method=True)
        self.SubmitCancel = channel.unary_unary(
                '/fastob.GatewayPublic/SubmitCancel',
                request_serializer=order__pb2.SubmitCancelRequest.SerializeToString,
                response_deserializer=order__pb2.Ack.FromString,
                _registered_method=True)
        self.Top = channel.unary_unary(
                '/fastob.GatewayPublic/Top',
                request_serializer=order__pb2.TopRequest.SerializeToString,
                response_deserializer=order__pb2.TopReply.FromString,
                _registered_method=True)
        self.Stats = channel.unary_unary(
                '/fastob.GatewayPublic/Stats',
                request_serializer=order__pb2.StatsRequest.SerializeToString,
                response_deserializer=order__pb2.StatsReply.FromString,
                _registered_method=True)
        self.Reset = channel.unary_unary(
                '/fastob.GatewayPublic/Reset',
                request_serializer=order__pb2.ResetRequest.SerializeToString,
                response_deserializer=order__pb2.ResetReply.FromString,
                _registered_method=True)


class GatewayPublicServicer(object):
    """---- Public Gateway (Python async) ----
    """

    def SubmitLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitMarket(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitCancel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Top(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Reset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GatewayPublicServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubmitLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitLimit,
                    request_deserializer=order__pb2.SubmitLimitRequest.FromString,
                    response_serializer=order__pb2.Ack.SerializeToString,
            ),
            'SubmitMarket': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitMarket,
                    request_deserializer=order__pb2.SubmitMarketRequest.FromString,
                    response_serializer=order__pb2.Ack.SerializeToString,
            ),
            'SubmitCancel': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitCancel,
                    request_deserializer=order__pb2.SubmitCancelRequest.FromString,
                    response_serializer=order__pb2.Ack.SerializeToString,
            ),
            'Top': grpc.unary_unary_rpc_method_handler(
                    servicer.Top,
                    request_deserializer=order__pb2.TopRequest.FromString,
                    response_serializer=order__pb2.TopReply.SerializeToString,
            ),
            'Stats': grpc.unary_unary_rpc_method_handler(
                    servicer.Stats,
                    request_deserializer=order__pb2.StatsRequest.FromString,
                    response_serializer=order__pb2.StatsReply.SerializeToString,
            ),
            'Reset': grpc.unary_unary_rpc_method_handler(
                    servicer.Reset,
                    request_deserializer=order__pb2.ResetRequest.FromString,
                    response_serializer=order__pb2.ResetReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fastob.GatewayPublic', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('fastob.GatewayPublic', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GatewayPublic(object):
    """---- Public Gateway (Python async) ----
    """

    @staticmethod
    def SubmitLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fastob.GatewayPublic/SubmitLimit',
            order__pb2.SubmitLimitRequest.SerializeToString,
            order__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubmitMarket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fastob.GatewayPublic/SubmitMarket',
            order__pb2.SubmitMarketRequest.SerializeToString,
            order__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubmitCancel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fastob.GatewayPublic/SubmitCancel',
            order__pb2.SubmitCancelRequest.SerializeToString,
            order__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Top(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fastob.GatewayPublic/Top',
            order__pb2.TopRequest.SerializeToString,
            order__pb2.TopReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Stats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fastob.GatewayPublic/Stats',
            order__pb2.StatsRequest.SerializeToString,
            order__pb2.StatsReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fastob.GatewayPublic/Reset',
            order__pb2.ResetRequest.SerializeToString,
            order__pb2.ResetReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
